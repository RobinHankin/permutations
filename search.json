[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor covenant code of conduct","text":"members, contributors, leaders pledge make participation community pleasant productive experience everyone, regardless. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our standards","title":"Contributor covenant code of conduct","text":"Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people Communicating respectfully differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor covenant code of conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event. Code Conduct adapted contributor covenant, version 2.1, available . answers common questions code conduct, see FAQ. Translations available .","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"note","dir":"","previous_headings":"","what":"Note","title":"Contributor covenant code of conduct","text":"Substantive deletions contributor covenant follow intent foster positive, respectful, inclusive community contributors feel empowered thrive. assume good faith, per WP:AGF choose highlight celebrate positive values behaviours. wish dwell —even mention—negative, per WP:dont. Eventually remove even note, follow advice.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to permutations","title":"Contributing to permutations","text":"Thank considering contributing permutations! interest making project better appreciated.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to permutations","text":"Please read adhere Code Conduct maintain safe, welcoming, inclusive environment.","code":""},{"path":"/CONTRIBUTING.html","id":"types-of-contributions","dir":"","previous_headings":"","what":"Types of contributions","title":"Contributing to permutations","text":"welcome various forms contributions: Bug Reports: Feel free report bugs encounter. Documentation: Typos, clarity issues, missing guides—-help welcome . Feature Discussions/Requests: Got idea? Open issue discuss potential. Code Contributions: code contributions welcome, send pull request. Use-cases: using permutations package, let know! ’s always great see applications mathematical software.","code":""},{"path":"/CONTRIBUTING.html","id":"using-co-authored-by-in-git-commits","dir":"","previous_headings":"","what":"Using co-authored-by in git commits","title":"Contributing to permutations","text":"encourage use co-authored commits collaborative efforts. helps giving credit contributors work.","code":"Co-authored-by: name <name@example.com> Co-authored-by: another-name <another-name@example.com>"},{"path":"/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing to permutations","text":"contributions make project better everyone. Thank participating! Also don’t forget recreate readme file: {r eval=FALSE} devtools::build_readme()","code":""},{"path":"/CONTRIBUTING.html","id":"tests","dir":"","previous_headings":"Development","what":"Tests","title":"Contributing to permutations","text":"Tests checks run CI, however locally one can use:","code":"Rscript -e 'devtools::test()'"},{"path":"/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"Development > Tests","what":"Documentation","title":"Contributing to permutations","text":"Ideally change documented. Major changes vignettes.","code":""},{"path":"/articles/cyclist.html","id":"package-idiom","dir":"Articles","previous_headings":"","what":"Package idiom","title":"Cyclists in the `permutations` package","text":"users deal cyclists directly. Function cycle() takes list cyclists returns object class cycle. nicifies input returning : However, might convenient practice use .cycle():","code":"(a <- list(list(c(1, 2, 4), c(3, 6)), list(c(1, 2), c(3, 4, 5, 6, 7)))) ## [[1]] ## [[1]][[1]] ## [1] 1 2 4 ##  ## [[1]][[2]] ## [1] 3 6 ##  ##  ## [[2]] ## [[2]][[1]] ## [1] 1 2 ##  ## [[2]][[2]] ## [1] 3 4 5 6 7 cycle(a) ## [1] (124)(36)   (12)(34567) as.cycle(c(\"(124)(36)\", \"(12)(34567)\")) ## [1] (124)(36)   (12)(34567)"},{"path":[]},{"path":"/articles/groupaction.html","id":"note-on-identity-permutation","dir":"Articles","previous_headings":"","what":"Note on identity permutation","title":"Function `as.function.permutation()` in the permutations package: group actions","text":"ever-problematic identity permutation acts empty set functionalization always returns error: resolution coerce word form explicit n:","code":"as.function(id)(4) ## Error in x[, a]: subscript out of bounds as.function(as.word(id,n=4))(4) ## [1] 4"},{"path":[]},{"path":"/articles/order_of_ops.html","id":"active-permutations","dir":"Articles","previous_headings":"","what":"Active permutations","title":"The permutation group: active and passive permutations, and the order of operations","text":"active permutation π\\pi moves object place ii place π()\\pi(). Textbooks undergraduate courses usually use system, used .","code":""},{"path":"/articles/order_of_ops.html","id":"passive-permutations","dir":"Articles","previous_headings":"","what":"Passive permutations","title":"The permutation group: active and passive permutations, and the order of operations","text":"passive permutation π\\pi replaces object position ii position π()\\pi().","code":""},{"path":"/articles/order_of_ops.html","id":"composition-of-active-permutations","dir":"Articles","previous_headings":"","what":"Composition of active permutations","title":"The permutation group: active and passive permutations, and the order of operations","text":"Suppose (active) permutation , another active permutation b: (note three dots representing three fixed points b). Note carefully operations aa bb commute discuss context active passive transforms. result executing aa, followed bb? Symbolically : (123456463512)⏞∘(123456523461)⏞b=(123456413652)⏞∘b \\overbrace{ \\left( \\begin{array}{ccccccccc} 1&2&3&4&5&6\\\\ 4&6&3&5&1&2 \\end{array} \\right) }^{} \\circ \\overbrace{ \\left( \\begin{array}{ccccccccc} 1&2&3&4&5&6\\\\ 5&2&3&4&6&1\\\\ \\end{array} \\right) }^{b}= \\overbrace{ \\left( \\begin{array}{ccccccccc} 1&2&3&4&5&6\\\\ 4&1&3&6&5&2\\\\ \\end{array} \\right) }^{\\circ b} Thus, example, 4→5→64\\longrightarrow 5\\longrightarrow 6. Considering operation ∘ba\\circ b, means perform permutation first, perform permutation b. Taking one step time , example: “person place 4 (object 4) moves place 5 (still object 4) …\\ldots object place 5 (still object 4) moves place 6”. See track object started place 4 (, object 4) two permutations, overall object 4 ends place 6. see right hand side: fourth column ∘ba\\circ b (46)\\left(\\begin{array}{c}4\\\\6\\end{array}\\right). execute b using active language [explicitly: express b active permutations, express result performing b active language], can use standard permutation composition, R idiom * operator: * operator R idiom essentially carries b[] evaluate *b (indexing starts 1, 0). Indeed may verify package idiom operates expected: showing agreement. functional notation (also known prefix notation) can ask happens object originally place 1 (object 1) Note, however, confusing order operations: functional notation, want operate element xx function ff function gg write g(f(x))g(f(x)) two successive mappings x→f(x)→g(f(x))x\\longrightarrow f(x)\\longrightarrow g(f(x)). Postfix notation denote process xfgxfg, shorthand (xf)g(xf)g. R idiom, implemented excellent magrittr package:","code":"b <- as.word(c(5, 2, 3, 4, 6, 1)) b ##     1 2 3 4 5 6 ## [1] 5 . . . 6 1 a * b ##     1 2 3 4 5 6 ## [1] 4 1 . 6 . 2 as.vector(b)[as.vector(a)] ## [1] 4 1 3 6 5 2 fa <- as.function(a) fb <- as.function(b) fb(fa(1)) ## [1] 4 as.function(a * b)(1) # should match fb(fa(1)) ## [1] 4 1 %>%   fa() %>%   fb() # idiom for fb(fa(1)), should match result above ## [1] 4"},{"path":"/articles/order_of_ops.html","id":"composition-of-passive-permutations","dir":"Articles","previous_headings":"","what":"Composition of passive permutations","title":"The permutation group: active and passive permutations, and the order of operations","text":"Now consider operations b discussed , perform b. time express permutations, composition, passive form, requires modification. First express b passive matrix form call a_passive b_passive: b, need create equivalents b_active b_passive : (note relationship b_active b_passive). want perform b , time want use matrices a_passive b_passive: work composition a_passive b_passive [explicitly: give passive transform corresponding performing a_passive first, b_passive second] want passive transformation, , matrix row labels , say a_passive first row 1:6. Let us call result two permutations ab_passive. Given ab_passive[1,1]=1, ask “ab_passive[2,1]? equivalent asking,”just performed permutation followed b. object currently place 1: composition permutations?” figure object place 1, look b_passive, recent operation. look first column b_passive say object place 6 moved b_passive place 1. figure object place 6 b_passive executed. answer , look a_passive see, column 6 a_passive object place 6 moved place 2 . Thus passive transform ab_passive indicates object place 1 move place 2 move. 1→6→21\\longrightarrow 6\\longrightarrow 2 case “→\\longrightarrow” means “comes ”. can thus represent passive transformation b_passive*a_passive: see R idiom permutation composition “*” used exactly way active passive permutations, different meaning requires us reverse order permutations. express result, ab_passive active language need take group-theoretic inverse composition. Recalling passive transforms group-theoretic inverses active transformation, algebraic notation (−1b−1)−1=ab;−1b−1=(ab)−1 \\left(^{-1}b^{-1}\\right)^{-1}=ab;\\qquad ^{-1}b^{-1}=\\left(ab\\right)^{-1} R idiom ","code":"a # word form ##     1 2 3 4 5 6 ## [1] 4 6 . 5 1 2 a_active # matrix form (active) ##                   [,1] [,2] [,3] [,4] [,5] [,6] ## place before move    1    2    3    4    5    6 ## place after move     4    6    3    5    1    2 a_passive # matrix form (passive) ##                   [,1] [,2] [,3] [,4] [,5] [,6] ## place after move     1    2    3    4    5    6 ## place before move    5    6    3    1    4    2 b ##     1 2 3 4 5 6 ## [1] 5 . . . 6 1 b_active ##                   [,1] [,2] [,3] [,4] [,5] [,6] ## place before move    1    2    3    4    5    6 ## place after move     5    2    3    4    6    1 b_passive ##                   [,1] [,2] [,3] [,4] [,5] [,6] ## place after move     1    2    3    4    5    6 ## place before move    6    2    3    4    1    5 a_passive ##                   [,1] [,2] [,3] [,4] [,5] [,6] ## place after move     1    2    3    4    5    6 ## place before move    5    6    3    1    4    2 b_passive ##                   [,1] [,2] [,3] [,4] [,5] [,6] ## place after move     1    2    3    4    5    6 ## place before move    6    2    3    4    1    5 inverse(inverse(b) * inverse(a)) == a * b # both should be TRUE ## [1] TRUE inverse(b) * inverse(a) == inverse(a * b) # note b precedes a on LHS ## [1] TRUE"},{"path":"/articles/order_of_ops.html","id":"permutation-matrices","dir":"Articles","previous_headings":"","what":"Permutation matrices","title":"The permutation group: active and passive permutations, and the order of operations","text":"Now show permutation matrices work deal active passive language. can express g terms permutation matrices: convenient relabel rows columns: Row n matrix pg shows object place n move ends . Thus, looking top row (row 1), see object place 1 now place 2 [second column row 1 nonzero]. second row (row 2) shows object place 2 now place 6, object place 3 now place 6, . active language. can see taking transpose equivalent inverting matrix: permutation matrix orthogonal. Now can consider second permutation h convert matrix form: now consider happens successive permutations, , time using permutation matrices. permute first g h, using matrix multiplication. (hand-edited put matrices side--side). Let us consider top row pg. multiplies column ph nonzero term column 3 ph row 2 nonzero. Thus (pg%*%ph)[1,3]==1. process , symbolically, 1→2→31\\longrightarrow 2\\longrightarrow 3.","code":"g <- as.cycle(c(1, 2, 6)) g ## [1] (126) pg <- perm_matrix(g) pg ##   1 2 3 4 5 6 ## 1 0 1 0 0 0 0 ## 2 0 0 0 0 0 1 ## 3 0 0 1 0 0 0 ## 4 0 0 0 1 0 0 ## 5 0 0 0 0 1 0 ## 6 1 0 0 0 0 0 dimnames(pg) <- list(place_before_move = 1:6, place_after_move = 1:6) pg ##                  place_after_move ## place_before_move 1 2 3 4 5 6 ##                 1 0 1 0 0 0 0 ##                 2 0 0 0 0 0 1 ##                 3 0 0 1 0 0 0 ##                 4 0 0 0 1 0 0 ##                 5 0 0 0 0 1 0 ##                 6 1 0 0 0 0 0 h <- as.word(c(1, 3, 4, 5, 2, 6)) h ##     1 2 3 4 5 6 ## [1] . 3 4 5 2 . ph <- perm_matrix(h) dimnames(ph) <- list(place_before_move = 1:6, place_after_move = 1:6) ph ##                  place_after_move ## place_before_move 1 2 3 4 5 6 ##                 1 1 0 0 0 0 0 ##                 2 0 0 1 0 0 0 ##                 3 0 0 0 1 0 0 ##                 4 0 0 0 0 1 0 ##                 5 0 1 0 0 0 0 ##                 6 0 0 0 0 0 1 pg %*% ph ##                  place_after_move ## place_before_move 1 2 3 4 5 6 ##                 1 0 0 1 0 0 0 ##                 2 0 0 0 0 0 1 ##                 3 0 0 0 1 0 0 ##                 4 0 0 0 0 1 0 ##                 5 0 1 0 0 0 0 ##                 6 1 0 0 0 0 0 pg                                  ph                                  pg %*% ph                   place_after_move                    place_after_move                    place_after_move  place_before_move 1 2 3 4 5 6       place_before_move 1 2 3 4 5 6       place_before_move 1 2 3 4 5 6                  1 0 1 0 0 0 0                       1 1 0 0 0 0 0                       1 0 0 1 0 0 0                  2 0 0 0 0 0 1                       2 0 0 1 0 0 0                       2 0 0 0 0 0 1                  3 0 0 1 0 0 0                       3 0 0 0 1 0 0                       3 0 0 0 1 0 0                  4 0 0 0 1 0 0                       4 0 0 0 0 1 0                       4 0 0 0 0 1 0                  5 0 0 0 0 1 0                       5 0 1 0 0 0 0                       5 0 1 0 0 0 0                  6 1 0 0 0 0 0                       6 0 0 0 0 0 1                       6 1 0 0 0 0 0"},{"path":"/articles/order_of_ops.html","id":"passive-language-for-permutation-matrices","dir":"Articles","previous_headings":"Permutation matrices","what":"Passive language for permutation matrices","title":"The permutation group: active and passive permutations, and the order of operations","text":"Alternatively, look matrix pg terms columns. Column n matrix shows object ended place n came . Thus, looking column 1, see object ended column 1 came place 6, object ended place 2 came place 1, . passive language. Thus passive matrix transpose active matrix (see swapping dimension names). Now use matrix rule AB=(B′′)′ AB=(B'')' show permutation matrix multiplication opposite order passive matrices. course, observe permutation matrices orthogonal use AB=(B−1A−1)−1 AB=\\left(B^{-1}^{-1}\\right)^{-1} instead.","code":""},{"path":[]},{"path":"/articles/print.html","id":"print-word-as-cycle","dir":"Articles","previous_headings":"","what":"Print word as cycle","title":"Print methods in the permutations package","text":"use, sometimes work objects word form sometimes objects cycle form. However, standard workflow use R’s default system, print values console: see , default, objects word form coerced cycle form echo-printing. However, possible suppress coercion setting option print_word_as_cycle: see coercion performed word object x: print method shows internal representation object. behaviour can confusing permutation can different print styles, reinstate default: people seem prefer printing cycle form.","code":"x <- rperm(n = 2) y <- as.cycle(x) unclass(x) # shows internal representation (x is in word form) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    2    6    1    7    3    5    4 #> [2,]    7    4    1    6    3    5    2 unclass(y) # shows internal representation (x is in cycle form) #> [[1]] #> [[1]][[1]] #> [1] 1 2 6 5 3 #>  #> [[1]][[2]] #> [1] 4 7 #>  #>  #> [[2]] #> [[2]][[1]] #> [1] 1 7 2 4 6 5 3 x # default: print to console #> [1] (12653)(47) (1724653)   #> [coerced from word form] y # default: print to console #> [1] (12653)(47) (1724653) options(print_word_as_cycle = FALSE) x #>     1 2 3 4 5 6 7 #> [1] 2 6 1 7 3 5 4 #> [2] 7 4 1 6 3 5 2 y #> [1] (12653)(47) (1724653) options(print_word_as_cycle = TRUE) # restore default"},{"path":"/articles/print.html","id":"commas","dir":"Articles","previous_headings":"Print word as cycle","what":"Commas","title":"Print methods in the permutations package","text":", saw print method permutations [9]\\left[9\\right]. 10 elements need comma. added default: , comma added aid readability. However, possible override behaviour setting option comma. default value NULL means add commas iff r>9r>9 Boolean values respected: see commas making output somewhat prolix, disaster. However, permuting >9>9 objects commas necessary interpret strings like 124 might 1,2,4 12,4 1,24 124: , absence commas somewhat confusing, default restored.","code":"x <- rperm(r = 15, moved = 4) print_cycle(x) #>  [1] (1,4,2,3)     (10,13,15)    (3,14)        (9,10,12)     (5,15,7,9)    #>  [6] (6,14)(12,15) (6,8,9)       (8,12,11)     (1,4,5)       (5,6,8) options(\"comma\" = TRUE) rperm(3, r = 9) # commas printed irregardless #> [1] (1,2,8,3,6,9,5,4,7) (1,8,3,4,9,6,2,7,5) (1,9,2,7,8,5,4,6,3) #> [coerced from word form] options(\"comma\" = FALSE) x <- rperm(3, r = 20) x # commas not printed irregardless #> [1] (194516182719314111013)(612815)(1720) (11771416615345122092)(8191811)(1013) #> [3] (1515)(2112043)(714891210)(131718)    #> [coerced from word form] options(\"comma\" = NULL) # restore default x # default for comparison #> [1] (1,9,4,5,16,18,2,7,19,3,14,11,10,13)(6,12,8,15)(17,20) #> [2] (1,17,7,14,16,6,15,3,4,5,12,20,9,2)(8,19,18,11)(10,13) #> [3] (1,5,15)(2,11,20,4,3)(7,14,8,9,12,10)(13,17,18)        #> [coerced from word form]"},{"path":"/articles/print.html","id":"symbols","dir":"Articles","previous_headings":"Print word as cycle","what":"Symbols","title":"Print methods in the permutations package","text":"permutations package considers permutations finite set. convenient identify finite set integers 1,2,…,n1,2,\\ldots,n [chiefly products inverses easy one can use R’s 1-based vector indexing: products just *b=b[] inverse W just W[W] <- seq_along(W)]. , default print method echoes internal representation permutation. see print method echoing internal representation set [n]={1,2,…,n}\\left[n\\right]=\\left\\lbrace 1,2,\\ldots,n\\right\\rbrace. However, possible use different set, using option perm_set: see cyclic representation permutations letters -z. However, use commas somewhat problematic, default print method uses >9>9 criterion including comma: see commas included (26>926>9) probably looks better without : One side-effect using finite set symbols print method might run symbols: see NA printed symbol’s index exceeds 26 (also absence commas help). Remember print method change object , might issue. possible use symbols one character:","code":"set.seed(0) x <- rperm(n = 3) dput(x) #> structure(c(6L, 7L, 5L, 1L, 3L, 2L, 4L, 2L, 6L, 3L, 6L, 3L, 7L,  #> 4L, 1L, 2L, 1L, 4L, 5L, 5L, 7L), dim = c(3L, 7L), class = c(\"permutation\",  #> \"word\")) x #> [1] (162)(34)(57) (17546)(23)   (15)(364)     #> [coerced from word form] options(perm_set = letters) rperm() #>  [1] (aegdb)(cf)  (abfec)      (acbf)(de)   (adfcbge)    (bdcge)      #>  [6] (acfgd)      (afgdeb)     (ad)(bf)(eg) (bfeg)(cd)   (afcdgbe)    #> [coerced from word form] (xx <- rperm(n = 2, r = 26)) #> [1] (a,f,r,h,k,l,c,i,j,w,z,v,y,o,u,d,g,p)(b,q,t,e,s,n)  #> [2] (a,s,z,l,y,r,p,m,u,b,c,k,w,q,x,j,v,h,i,e,n,o,g,t,d) #> [coerced from word form] options(comma = FALSE) xx #> [1] (afrhklcijwzvyoudgp)(bqtesn) (aszlyrpmubckwqxjvhienogtd)  #> [coerced from word form] (z <- rperm(n = 2, r = 50)) #> [1] (agNANAyNAepqNANAhbNAuNANAjNAlzNANAdxNAfsNAoNANANArkmNAvnNANANANANAwNANAi)(ct)     #> [2] (aNANArNANANAi)(bNANAsNAlvzNAgNANAwNANANAoNANAjtnpNAyeNANAmNAfNAcNAq)(dhu)(kxNANA) #> [coerced from word form] options(perm_set = state.abb) options(comma = TRUE) z #> [1] (AL,CT,OK,WV,MO,NC,CA,KS,KY,PA,NE,DE,AK,WA,MA,NY,NJ,GA,RI,ID,MT,VA,SD,AR,MS,SC,CO,ME,NM,IA,VT,WI,NH,LA,HI,IL,ND,MI,IN,TX,TN,OR,OH,WY,MN,UT,NV,FL)(AZ,MD)   #> [2] (AL,NE,SC,LA,WA,WV,ND,FL)(AK,UT,TN,ME,VA,ID,MI,MT,NV,CT,NH,VT,MN,NC,WY,OR,IA,NJ,NY,GA,MD,IN,KS,WI,MO,CA,OK,RI,IL,PA,CO,SD,AZ,NM,KY)(AR,DE,MA)(HI,MS,TX,OH) #> [coerced from word form]"},{"path":"/articles/print.html","id":"cycles-in-length-order","dir":"Articles","previous_headings":"","what":"Cycles in length order","title":"Print methods in the permutations package","text":"Consider following: see 30 random permutations shape (⋅⋅)(⋅⋅⋅)(⋅⋅⋅)\\left(\\cdot\\,\\cdot\\right)\\left(\\cdot\\cdot\\cdot\\right)\\left(\\cdot\\cdot\\cdot\\right). However, function nicify_cyclist() sorts cycle smallest element first, sorts cycles first element, obvious permutations shape. print method sensitive experimental option print_in_length_order (via function .character_cyclist()). TRUE, permutations cycle form printed cycles increasing length order:","code":"options(perm_set = NULL) # revert to numbers options(comma = FALSE) # supress comma x <- rgivenshape(30, 2:4) x #>  [1] (1938)(256)(47) (162)(3547)(89) (189)(24)(3567) (1523)(48)(697) #>  [5] (163)(25)(4978) (1263)(45)(789) (1829)(36)(457) (1764)(239)(58) #>  [9] (153)(28)(4976) (1783)(265)(49) (1829)(34)(576) (13)(2496)(587) #> [13] (1326)(498)(57) (1537)(286)(49) (17)(284)(3965) (1846)(237)(59) #> [17] (1597)(246)(38) (1392)(486)(57) (17)(268)(3549) (1972)(356)(48) #> [21] (198)(2647)(35) (14)(2853)(697) (19)(247)(3568) (1458)(29)(367) #> [25] (1249)(367)(58) (1794)(256)(38) (1394)(287)(56) (167)(2439)(58) #> [29] (15)(287)(3649) (1369)(285)(47) options(\"print_in_length_order\" = TRUE) x #>  [1] (47)(256)(1938) (89)(162)(3547) (24)(189)(3567) (48)(697)(1523) #>  [5] (25)(163)(4978) (45)(789)(1263) (36)(457)(1829) (58)(239)(1764) #>  [9] (28)(153)(4976) (49)(265)(1783) (34)(576)(1829) (13)(587)(2496) #> [13] (57)(498)(1326) (49)(286)(1537) (17)(284)(3965) (59)(237)(1846) #> [17] (38)(246)(1597) (57)(486)(1392) (17)(268)(3549) (48)(356)(1972) #> [21] (35)(198)(2647) (14)(697)(2853) (19)(247)(3568) (29)(367)(1458) #> [25] (58)(367)(1249) (38)(256)(1794) (56)(287)(1394) (58)(167)(2439) #> [29] (15)(287)(3649) (47)(285)(1369)"},{"path":"/articles/print.html","id":"wrapup","dir":"Articles","previous_headings":"","what":"Wrapup","title":"Print methods in the permutations package","text":"used state abbreviations (builtin R dataset) also direct print method use commas readability. However, best reset default, option persists vignettes:","code":"options(perm_set = NULL) options(comma = NULL) options(print_word_as_cycle = FALSE) options(\"print_in_length_order\" = FALSE)"},{"path":[]},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin K. S. Hankin. Author, maintainer. Paul Egeler. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hankin, R. K. S. (2020). Introducing permutations package. SoftwareX, volume 11 https://doi.org/10.1016/j.softx.2020.100453","code":"@Article{,   title = {{Introducing the permutations package}},   author = {{Robin K. S. Hankin}},   journal = {SoftwareX},   year = {2020},   url = {https://doi.org/10.1016/j.softx.2020.100453}, }"},{"path":[]},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"The Symmetric Group: Permutations of a Finite Set","text":"permutations package provides R-centric functionality working permutations finite set. includes group-theoretic composition permutations can transform word form cycle form back.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Symmetric Group: Permutations of a Finite Set","text":"can install released version permutations CRAN : package maintained github.","code":"# install.packages(\"permutations\")  # uncomment this to use the package library(\"permutations\") #>  #> Attaching package: 'permutations' #> The following object is masked from 'package:stats': #>  #>     cycle"},{"path":"/index.html","id":"the-permutations-package-in-use","dir":"","previous_headings":"","what":"The permutations package in use","title":"The Symmetric Group: Permutations of a Finite Set","text":"Random permutations finite set given rperm() command: , object x internally stored matrix (word form) result printed cycle form default, easier understand. can print word form wish: (dot indicates fixed point). package uses arithmetic operations * combine permutations ^ conjugation:","code":"(x <- rperm(10, 9)) #>  [1] (19524)(37)    (1238794)      (1745682)(39)  (15)(3897)(46) (132654789)    #>  [6] (17263)(59)    (136)(47589)   (162)(4795)    (14763)(259)   (168347925)    #> [coerced from word form] options(print_word_as_cycle = FALSE) # override default as.word(x) #>      {1} {2} {3} {4} {5} {6} {7} {8} {9} #> [1]  9   4   7   1   2   .   3   .   5   #> [2]  2   3   8   1   .   .   9   7   4   #> [3]  7   1   9   5   6   8   4   2   3   #> [4]  5   .   8   6   1   4   3   9   7   #> [5]  3   6   2   7   4   5   8   9   1   #> [6]  7   6   1   .   9   3   2   .   5   #> [7]  3   .   6   7   8   1   5   9   4   #> [8]  6   1   .   7   4   2   9   .   5   #> [9]  4   5   1   7   9   3   6   .   2   #> [10] 6   5   4   7   1   8   9   3   2 options(print_word_as_cycle = TRUE) # restore default: we usually want to print a cycle irregardless (a <- as.word(c(4, 2, 3, 1, 5, 7, 6))) #> [1] (14)(67) #> [coerced from word form] (b <- as.cycle(1:4)) #> [1] (1234) a * b #> [1] (234)(67) #> [coerced from word form] b * a #> [1] (123)(67) #> [coerced from word form]"},{"path":"/index.html","id":"the-megaminx","dir":"","previous_headings":"","what":"The megaminx","title":"The Symmetric Group: Permutations of a Finite Set","text":"megaminx dodecahedral puzzle similar construction Rubik cube puzzle 50 movable pieces 132 coloured stickers (“facets”). permutations package includes functionality simulate megaminx exhibits 82-turn superflip. vignette gives extended discussion.","code":""},{"path":"/reference/Ops.permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Ops Group Methods for permutations — Ops.permutation","title":"Arithmetic Ops Group Methods for permutations — Ops.permutation","text":"Allows arithmetic operators used manipulation permutation objects   addition, multiplication, division, integer powers, etc.","code":""},{"path":"/reference/Ops.permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Ops Group Methods for permutations — Ops.permutation","text":"","code":"# S3 method for class 'permutation' Ops(e1, e2) cycle_power(x,pow) cycle_power_single(x,pow) cycle_sum(e1,e2) cycle_sum_single(c1,c2) word_equal(e1,e2) word_prod(e1,e2) word_prod_single(e1,e2) permprod(x) vps(vec,pow) ccps(n,pow) helper(e1,e2) cycle_plus_integer_elementwise(x,y) conjugation(e1,e2)"},{"path":"/reference/Ops.permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Ops Group Methods for permutations — Ops.permutation","text":"x,e1,e2 Objects class “permutation” c1,c2 Objects class cycle pow Integer vector powers vec function vps(), vector integers     corresponding cycle n function ccps(), integer power     cycle(seq_len(n)) raised; may positive     negative y experimental function     cycle_plus_integer_elementwise(), integer","code":""},{"path":"/reference/Ops.permutation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic Ops Group Methods for permutations — Ops.permutation","text":"Function Ops.permutation() passes binary arithmetic   operators (“+”, “*”, “/”,   “^”, “==”) appropriate   specialist function. Multiplication, *b, effectively   word_prod(,b); coerces arguments word form (  *b = b[]). Raising permutations integer powers, ^n,   cycle_power(,n); coerces cycle form returns   cycle (even \\(n=1\\)).  Negative zero values n   operate expected.  Function cycle_power() vectorized;   calls cycle_power_single(), .  calls   vps() (“Vector Power Single”), checks simple   cases pow=0 identity permutation; function   vps() calls function ccps() performs actual   number-theoretic manipulation raise cycle power. Group-theoretic conjugation implemented: package idiom,   ^b gives inverse(b)**b.  notation motivated   identities x^(yz)=(x^y)^z (xy)^z=x^z*y^z [  \\(x^{yz}=(x^y)^z\\) \\((xy)^z=x^zy^z\\)].   Internally, conjugation() called.  concept conjugate   permutations [, permutations   shape()] discussed conjugate. caret “^” also indicates group action [  discussion .function.permutation.Rd].  Given integer   n permutation g, idiom n^g returns   group action g acting n.  notation   motivated identity n^(ab) == (n^)^b. sum two permutations b,   +b, defined cycle representations addends   disjoint.  sum defined permutation given juxtaposing   cycles b.  Note   operation commutative.  b   disjoint cycle representations, error returned.  +b   defined ^n + b^n == (+b)^n == ^n * b^n == (*b)^n \\(n\\\\mathbb{Z}\\).  Using “+”   way useful want guarantee two permutations   commute (NB: permutation commutes ^  integer, particular commutes .   +returns error: operation checks   disjointness, commutativity). Permutation “division”, /b,   *inverse(b).  Note /b*c evaluated left   right equivalent *inverse(b)*c.  See note. Function helper() sorts recycling binary functions,   behaviour inherited cbind(), also   handles names returned permutation. Experimental functionality provided define “sum”   permutation integer.  \\(x\\) permutation cycle   form \\(x=(abc)\\), say, \\(n\\) integer,   \\(x+n=(+n,b+n,c+n)\\): element cycle \\(x\\)   increased \\(n\\).  Note associativity   consequences.  example, x+(x+n) might defined   (x+x)+n, two “+” operators different   interpretations.  Distributivity similarly broken (see   examples).  Package idiom includes x-n [defined x +   (-n)] n+x n-x inverses defined   multiplicatively.  implementation vectorized.","code":""},{"path":"/reference/Ops.permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Ops Group Methods for permutations — Ops.permutation","text":"None functions really intended end user:   use ops shown examples section.","code":""},{"path":"/reference/Ops.permutation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Arithmetic Ops Group Methods for permutations — Ops.permutation","text":"class returned object appropriate one. Unary operators invert permutation problematic   package.  like using “id/x” represent   permutation inverse: idiom introduces utterly redundant   object (“id”), forces use binary operator   unary operator needed.  Similar comments apply   “x^-1”, introduces redundant object   (-1) uses binary operator. Currently, “-x” returns multiplicative inverse   x, entirely satisfactory either, uses   additive notation: rest package uses multiplicative   notation.  Thus x*-x == id, looks little odd OTOH   noone problem x^-1 inverses. like follow APL use “/x”,   seem possible R.  natural   unary operator exclamation mark “!x”.   However, redefining exclamation mark give permutation   inverses, possible, desirable precedence   low.  One like !x*y return inverse(x)*y   instead standard precedence rules means returns   inverse(x*y).  Earlier versions package interpreted   !x inverse(x), disaster: implement   commutator \\([x,y]=x^{-1}y^{-1}xy\\),   example, one like use !x*!y*x*y,   interpreted !(x*(!y*(x*y))); one use   (!x)*(!y)*x*y.  found use heaps   brackets everywhere.  caused severe cognitive dissonance   removed exclamation mark inverses package.    might reinstate future.  appear way   define new unary operator due construction   parser.","code":""},{"path":"/reference/Ops.permutation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arithmetic Ops Group Methods for permutations — Ops.permutation","text":"Robin K. S. Hankin","code":""},{"path":"/reference/Ops.permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic Ops Group Methods for permutations — Ops.permutation","text":"","code":"x <- rperm(10,9) # word form y <- rperm(10,9) # word form  x*y  # products are given in word form but the print method coerces to cycle form #>  [1] (19638452)      (1452698)       (18726)(354)    (14732659)      #>  [5] (1439685)       (17294536)      (126453987)     (1238)(456)(79) #>  [9] (1432)(576)(89) (184)(293765)   #> [coerced from word form] print_word(x*y) #>      1 2 3 4 5 6 7 8 9 #> [1]  9 1 8 5 2 3 . 4 6 #> [2]  4 6 . 5 2 9 . 1 8 #> [3]  8 6 5 3 4 1 2 7 . #> [4]  4 6 2 7 9 5 3 . 1 #> [5]  4 . 9 3 1 8 . 5 6 #> [6]  7 9 6 5 3 1 2 . 4 #> [7]  2 6 9 5 3 4 1 7 8 #> [8]  2 3 8 5 6 4 9 1 7 #> [9]  4 1 2 3 7 5 6 9 8 #> [10] 8 9 7 1 2 5 6 4 3  x^5  # powers are given in cycle form #>  [1] (17)(2984635)  (18)(2794)(35) (589)          (1735)(2846)   (1965387)      #>  [6] (2679483)      (183)          (1923564)(78)  (1963)(587)    (17693258)      x^as.cycle(1:5)  # conjugation (not integer power!); coerced to word. #>  [1] (1849635)(27)  (14)(28)(3795) (198)(23647)   (1274)(3856)   (1768942)      #>  [6] (3947865)      (13597)(248)   (1245369)(78)  (178)(2964)    (19236847)     #> [coerced from word form]  x*inverse(x) == id  # all TRUE #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   # the 'sum' of two permutations is defined if their cycles are disjoint: as.cycle(1:4) + as.cycle(7:9) #> [1] (1234)(789)  data(megaminx) megaminx[1] + megaminx[7:12] #>                                                                                                                                                                       LightGreen  #>           (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)(30,88,120,110,40)(31,89,121,111,41)(39,87,129,119,49)(70,72,74,76,78)(71,73,75,77,79)  #>                                                                                                                                                                           Orange  #>              (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)(27,99,121,71,37)(28,90,122,72,38)(29,91,123,73,39)(80,82,84,86,88)(81,83,85,87,89)  #>                                                                                                                                                                        LightBlue  #>           (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)(25,65,101,123,83)(26,66,102,124,84)(27,67,103,125,85)(90,92,94,96,98)(91,93,95,97,99)  #>                                                                                                                                                                      LightYellow  #> (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)(53,113,125,95,63)(54,114,126,96,64)(55,115,127,97,65)(100,102,104,106,108)(101,103,105,107,109)  #>                                                                                                                                                                             Pink  #> (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)(41,75,127,107,51)(42,76,128,108,52)(43,77,129,109,53)(110,112,114,116,118)(111,113,115,117,119)  #>                                                                                                                                                                             Grey  #> (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)(73,85,97,109,111)(74,86,98,100,112)(75,87,99,101,113)(120,122,124,126,128)(121,123,125,127,129)   rperm() + 100 #>  [1] (101,102)(103,106)(104,107)    (101,103)(102,105,104,107)     #>  [3] (102,104,105,106)              (101,104,105,106,102,103,107)  #>  [5] (101,104,105)(103,106)         (101,102)(103,106,107,104)     #>  [7] (101,104,106,102,103,107,105)  (102,105,104,103)              #>  [9] (101,107,106)(102,104,103)     (101,102,107,104,105)(103,106)  z <- cyc_len(4) z #> [1] (1234) z+100 #> [1] (101,102,103,104) z + 0:5 #> [1] (1234) (2345) (3456) (4567) (5678) (6789) (z + 0:5)*z #> [1] (13)(24)     (12453)      (123)(456)   (1234567)    (1234)(5678) #> [6] (1234)(6789) #> [coerced from word form]  w <- cyc_len(7) + 1 (w+1)*(w-1) #> [1] (123578946) #> [coerced from word form]"},{"path":"/reference/allperms.html","id":null,"dir":"Reference","previous_headings":"","what":"All permutations with given characteristics — allperms","title":"All permutations with given characteristics — allperms","text":"Functionality enumerate permutations given different   characteristics.  following, n assumed   non-negative integer.  Permutations, general, coerced cycle   form.  allperms(n) returns \\(n!\\) permutations     \\([n]\\). allcycn() returns \\((n-1)!\\)  permutations     \\([n]\\) comprising single cycle length \\(n\\). allcyc(s) returns single-cycle permutations set     \\(s\\).  \\(s\\) repeated value, opaque error     message returned. allpermslike(o) takes length-one vector o     permutations returns vector comprising permutations     shape cycle sets argument. some_perms_shape(part) takes integer partition     part, set non-negative integers, returns     vector comprising every permutation size sum(part)     shape part cycles increasing order. all_cyclic_shuffles(u) takes permutation u     returns vector comprising permutations shape     cycle sets.  vectorized argument u may     vector permutations. all_perms_shape(p) takes permutation p     returns vector permutations size sum(p) shape     p.","code":""},{"path":"/reference/allperms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All permutations with given characteristics — allperms","text":"","code":"allperms(n) allcycn(n) allcyc(s) allpermslike(o) some_perms_shape(shape) all_cyclic_shuffles(o) all_perms_shape(shape)"},{"path":"/reference/allperms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All permutations with given characteristics — allperms","text":"shape set strictly positive integers, interpreted     shape partition s set strictly positive integers, interpreted set     permutations defined n size permutation o vector permutations, coerced cycle form.  Function     allpermslike() considers first element","code":""},{"path":"/reference/allperms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"All permutations with given characteristics — allperms","text":"Function allperms() basic (idiom word(t(partitions::perms(n)))) completeness.","code":""},{"path":"/reference/allperms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"All permutations with given characteristics — allperms","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/allperms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"All permutations with given characteristics — allperms","text":"M. C. Er 1989 “Efficient   enumeration cyclic permutations situ”.  International   Journal Computer Mathematics, volume 29:2-4, pp121-129.","code":""},{"path":"/reference/allperms.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"All permutations with given characteristics — allperms","text":"Function allcyc() taken directly Er's   “fine-tuned” algorithm.  really implemented   C part partitions package   yet got round .","code":""},{"path":"/reference/allperms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All permutations with given characteristics — allperms","text":"","code":"allperms(5) #>   [1] ()        (45)      (34)      (345)     (354)     (35)      (23)      #>   [8] (23)(45)  (234)     (2345)    (2354)    (235)     (243)     (2453)    #>  [15] (24)      (245)     (24)(35)  (2435)    (2543)    (253)     (254)     #>  [22] (25)      (2534)    (25)(34)  (12)      (12)(45)  (12)(34)  (12)(345) #>  [29] (12)(354) (12)(35)  (123)     (123)(45) (1234)    (12345)   (12354)   #>  [36] (1235)    (1243)    (12453)   (124)     (1245)    (124)(35) (12435)   #>  [43] (12543)   (1253)    (1254)    (125)     (12534)   (125)(34) (132)     #>  [50] (132)(45) (1342)    (13452)   (13542)   (1352)    (13)      (13)(45)  #>  [57] (134)     (1345)    (1354)    (135)     (13)(24)  (13)(245) (1324)    #>  [64] (13245)   (13524)   (135)(24) (13)(254) (13)(25)  (13254)   (1325)    #>  [71] (134)(25) (13425)   (1432)    (14532)   (142)     (1452)    (142)(35) #>  [78] (14352)   (143)     (1453)    (14)      (145)     (14)(35)  (1435)    #>  [85] (1423)    (14523)   (14)(23)  (145)(23) (14)(235) (14235)   (14253)   #>  [92] (143)(25) (14)(253) (14325)   (14)(25)  (1425)    (15432)   (1532)    #>  [99] (1542)    (152)     (15342)   (152)(34) (1543)    (153)     (154)     #> [106] (15)      (1534)    (15)(34)  (15423)   (1523)    (154)(23) (15)(23)  #> [113] (15234)   (15)(234) (153)(24) (15243)   (15324)   (15)(243) (1524)    #> [120] (15)(24)  #> [coerced from word form]  allcycn(5) #>  [1] (12345) (12354) (12453) (12435) (12534) (12543) (13452) (13542) (13245) #> [10] (13524) (13425) (13254) (14523) (14235) (14532) (14352) (14253) (14325) #> [19] (15234) (15423) (15324) (15243) (15342) (15432) #> [coerced from word form]  allcyc(c(5,6,8,3)) #> [1] (3568) (3856) (3658) (3586) (3685) (3865)  allpermslike(as.cycle(\"(12)(34)(5678)\")) #> [1] (12)(34)(5678) (12)(34)(5687) (12)(34)(5786) (12)(34)(5768) (12)(34)(5867) #> [6] (12)(34)(5876) allpermslike(rgivenshape(c(1,1,3,4))) #>  [1] (258)(3974) (285)(3974) (258)(3947) (285)(3947) (258)(3749) (285)(3749) #>  [7] (258)(3794) (285)(3794) (258)(3497) (285)(3497) (258)(3479) (285)(3479) some_perms_shape(c(2,2,4)) #>   [1] (1278)(35)(46) (1278)(36)(45) (1278)(34)(56) (1238)(45)(67) (1238)(47)(56) #>   [6] (1238)(46)(57) (1237)(48)(56) (1237)(45)(68) (1237)(46)(58) (1236)(48)(57) #>  [11] (1236)(47)(58) (1236)(45)(78) (1234)(58)(67) (1234)(57)(68) (1234)(56)(78) #>  [16] (1235)(48)(67) (1235)(47)(68) (1235)(46)(78) (1248)(35)(67) (1248)(37)(56) #>  [21] (1248)(36)(57) (1247)(38)(56) (1247)(35)(68) (1247)(36)(58) (1246)(38)(57) #>  [26] (1246)(37)(58) (1246)(35)(78) (1245)(38)(67) (1245)(37)(68) (1245)(36)(78) #>  [31] (1258)(36)(47) (1258)(37)(46) (1258)(34)(67) (1257)(38)(46) (1257)(36)(48) #>  [36] (1257)(34)(68) (1256)(38)(47) (1256)(37)(48) (1256)(34)(78) (1268)(35)(47) #>  [41] (1268)(37)(45) (1268)(34)(57) (1267)(38)(45) (1267)(35)(48) (1267)(34)(58) #>  [46] (1378)(25)(46) (1378)(24)(56) (1378)(26)(45) (1348)(25)(67) (1348)(26)(57) #>  [51] (1348)(27)(56) (1347)(28)(56) (1347)(26)(58) (1347)(25)(68) (1346)(28)(57) #>  [56] (1346)(25)(78) (1346)(27)(58) (1345)(28)(67) (1345)(26)(78) (1345)(27)(68) #>  [61] (1358)(26)(47) (1358)(24)(67) (1358)(27)(46) (1357)(28)(46) (1357)(24)(68) #>  [66] (1357)(26)(48) (1356)(28)(47) (1356)(24)(78) (1356)(27)(48) (1368)(25)(47) #>  [71] (1368)(24)(57) (1368)(27)(45) (1367)(28)(45) (1367)(24)(58) (1367)(25)(48) #>  [76] (1478)(25)(36) (1478)(26)(35) (1478)(23)(56) (1458)(26)(37) (1458)(27)(36) #>  [81] (1458)(23)(67) (1457)(28)(36) (1457)(26)(38) (1457)(23)(68) (1456)(28)(37) #>  [86] (1456)(27)(38) (1456)(23)(78) (1468)(25)(37) (1468)(27)(35) (1468)(23)(57) #>  [91] (1467)(28)(35) (1467)(25)(38) (1467)(23)(58) (1578)(26)(34) (1578)(24)(36) #>  [96] (1578)(23)(46) (1568)(27)(34) (1568)(24)(37) (1568)(23)(47) (1567)(28)(34) #> [101] (1567)(24)(38) (1567)(23)(48) (1678)(25)(34) (1678)(24)(35) (1678)(23)(45) #> [106] (14)(2378)(56) (15)(2378)(46) (16)(2378)(45) (16)(2348)(57) (15)(2348)(67) #> [111] (17)(2348)(56) (16)(2347)(58) (18)(2347)(56) (15)(2347)(68) (15)(2346)(78) #> [116] (18)(2346)(57) (17)(2346)(58) (16)(2345)(78) (18)(2345)(67) (17)(2345)(68) #> [121] (14)(2358)(67) (16)(2358)(47) (17)(2358)(46) (14)(2357)(68) (18)(2357)(46) #> [126] (16)(2357)(48) (14)(2356)(78) (18)(2356)(47) (17)(2356)(48) (14)(2368)(57) #> [131] (15)(2368)(47) (17)(2368)(45) (14)(2367)(58) (18)(2367)(45) (15)(2367)(48) #> [136] (16)(2478)(35) (15)(2478)(36) (13)(2478)(56) (17)(2458)(36) (16)(2458)(37) #> [141] (13)(2458)(67) (16)(2457)(38) (18)(2457)(36) (13)(2457)(68) (17)(2456)(38) #> [146] (18)(2456)(37) (13)(2456)(78) (17)(2468)(35) (15)(2468)(37) (13)(2468)(57) #> [151] (15)(2467)(38) (18)(2467)(35) (13)(2467)(58) (14)(2578)(36) (16)(2578)(34) #> [156] (13)(2578)(46) (14)(2568)(37) (17)(2568)(34) (13)(2568)(47) (14)(2567)(38) #> [161] (18)(2567)(34) (13)(2567)(48) (14)(2678)(35) (15)(2678)(34) (13)(2678)(45) #> [166] (16)(25)(3478) (12)(3478)(56) (15)(26)(3478) (17)(26)(3458) (12)(3458)(67) #> [171] (16)(27)(3458) (16)(28)(3457) (12)(3457)(68) (18)(26)(3457) (17)(28)(3456) #> [176] (12)(3456)(78) (18)(27)(3456) (17)(25)(3468) (12)(3468)(57) (15)(27)(3468) #> [181] (15)(28)(3467) (12)(3467)(58) (18)(25)(3467) (14)(26)(3578) (12)(3578)(46) #> [186] (16)(24)(3578) (14)(27)(3568) (12)(3568)(47) (17)(24)(3568) (14)(28)(3567) #> [191] (12)(3567)(48) (18)(24)(3567) (14)(25)(3678) (12)(3678)(45) (15)(24)(3678) #> [196] (16)(23)(4578) (12)(36)(4578) (13)(26)(4578) (17)(23)(4568) (12)(37)(4568) #> [201] (13)(27)(4568) (18)(23)(4567) (12)(38)(4567) (13)(28)(4567) (15)(23)(4678) #> [206] (12)(35)(4678) (13)(25)(4678) (14)(23)(5678) (12)(34)(5678) (13)(24)(5678) all_cyclic_shuffles(cyc_len(3:5)) #>  [1] (123)   (132)   (1234)  (1243)  (1342)  (1324)  (1423)  (1432)  (12345) #> [10] (12354) (12453) (12435) (12534) (12543) (13452) (13542) (13245) (13524) #> [19] (13425) (13254) (14523) (14235) (14532) (14352) (14253) (14325) (15234) #> [28] (15423) (15324) (15243) (15342) (15432)  all_perms_shape(c(2,2,3)) #>   [1] (127)(35)(46) (172)(35)(46) (127)(36)(45) (172)(36)(45) (127)(34)(56) #>   [6] (172)(34)(56) (126)(37)(45) (162)(37)(45) (126)(35)(47) (162)(35)(47) #>  [11] (126)(34)(57) (162)(34)(57) (123)(47)(56) (132)(47)(56) (123)(46)(57) #>  [16] (132)(46)(57) (123)(45)(67) (132)(45)(67) (124)(37)(56) (142)(37)(56) #>  [21] (124)(36)(57) (142)(36)(57) (124)(35)(67) (142)(35)(67) (125)(37)(46) #>  [26] (152)(37)(46) (125)(36)(47) (152)(36)(47) (125)(34)(67) (152)(34)(67) #>  [31] (137)(25)(46) (173)(25)(46) (137)(24)(56) (173)(24)(56) (137)(26)(45) #>  [36] (173)(26)(45) (136)(27)(45) (163)(27)(45) (136)(24)(57) (163)(24)(57) #>  [41] (136)(25)(47) (163)(25)(47) (134)(27)(56) (143)(27)(56) (134)(25)(67) #>  [46] (143)(25)(67) (134)(26)(57) (143)(26)(57) (135)(27)(46) (153)(27)(46) #>  [51] (135)(24)(67) (153)(24)(67) (135)(26)(47) (153)(26)(47) (147)(25)(36) #>  [56] (174)(25)(36) (147)(26)(35) (174)(26)(35) (147)(23)(56) (174)(23)(56) #>  [61] (146)(27)(35) (164)(27)(35) (146)(25)(37) (164)(25)(37) (146)(23)(57) #>  [66] (164)(23)(57) (145)(27)(36) (154)(27)(36) (145)(26)(37) (154)(26)(37) #>  [71] (145)(23)(67) (154)(23)(67) (157)(26)(34) (175)(26)(34) (157)(24)(36) #>  [76] (175)(24)(36) (157)(23)(46) (175)(23)(46) (156)(27)(34) (165)(27)(34) #>  [81] (156)(24)(37) (165)(24)(37) (156)(23)(47) (165)(23)(47) (167)(25)(34) #>  [86] (176)(25)(34) (167)(24)(35) (176)(24)(35) (167)(23)(45) (176)(23)(45) #>  [91] (14)(237)(56) (14)(273)(56) (15)(237)(46) (15)(273)(46) (16)(237)(45) #>  [96] (16)(273)(45) (14)(236)(57) (14)(263)(57) (17)(236)(45) (17)(263)(45) #> [101] (15)(236)(47) (15)(263)(47) (15)(234)(67) (15)(243)(67) (17)(234)(56) #> [106] (17)(243)(56) (16)(234)(57) (16)(243)(57) (14)(235)(67) (14)(253)(67) #> [111] (17)(235)(46) (17)(253)(46) (16)(235)(47) (16)(253)(47) (16)(247)(35) #> [116] (16)(274)(35) (15)(247)(36) (15)(274)(36) (13)(247)(56) (13)(274)(56) #> [121] (15)(246)(37) (15)(264)(37) (17)(246)(35) (17)(264)(35) (13)(246)(57) #> [126] (13)(264)(57) (16)(245)(37) (16)(254)(37) (17)(245)(36) (17)(254)(36) #> [131] (13)(245)(67) (13)(254)(67) (14)(257)(36) (14)(275)(36) (16)(257)(34) #> [136] (16)(275)(34) (13)(257)(46) (13)(275)(46) (14)(256)(37) (14)(265)(37) #> [141] (17)(256)(34) (17)(265)(34) (13)(256)(47) (13)(265)(47) (14)(267)(35) #> [146] (14)(276)(35) (15)(267)(34) (15)(276)(34) (13)(267)(45) (13)(276)(45) #> [151] (16)(25)(347) (16)(25)(374) (12)(347)(56) (12)(374)(56) (15)(26)(347) #> [156] (15)(26)(374) (15)(27)(346) (15)(27)(364) (12)(346)(57) (12)(364)(57) #> [161] (17)(25)(346) (17)(25)(364) (16)(27)(345) (16)(27)(354) (12)(345)(67) #> [166] (12)(354)(67) (17)(26)(345) (17)(26)(354) (14)(26)(357) (14)(26)(375) #> [171] (12)(357)(46) (12)(375)(46) (16)(24)(357) (16)(24)(375) (14)(27)(356) #> [176] (14)(27)(365) (12)(356)(47) (12)(365)(47) (17)(24)(356) (17)(24)(365) #> [181] (14)(25)(367) (14)(25)(376) (12)(367)(45) (12)(376)(45) (15)(24)(367) #> [186] (15)(24)(376) (16)(23)(457) (16)(23)(475) (12)(36)(457) (12)(36)(475) #> [191] (13)(26)(457) (13)(26)(475) (17)(23)(456) (17)(23)(465) (12)(37)(456) #> [196] (12)(37)(465) (13)(27)(456) (13)(27)(465) (15)(23)(467) (15)(23)(476) #> [201] (12)(35)(467) (12)(35)(476) (13)(25)(467) (13)(25)(476) (14)(23)(567) #> [206] (14)(23)(576) (12)(34)(567) (12)(34)(576) (13)(24)(567) (13)(24)(576) all_perms_shape(c(2,2,1,1))  # size 6 (length-1 cycles vanish) #>  [1] (16)(25) (16)(24) (16)(23) (16)(35) (16)(34) (16)(45) (12)(56) (12)(36) #>  [9] (12)(35) (12)(34) (12)(46) (12)(45) (13)(26) (13)(24) (13)(25) (13)(56) #> [17] (13)(46) (13)(45) (14)(26) (14)(25) (14)(23) (14)(36) (14)(35) (14)(56) #> [25] (15)(26) (15)(24) (15)(23) (15)(36) (15)(34) (15)(46) (26)(35) (26)(34) #> [33] (26)(45) (23)(56) (23)(46) (23)(45) (24)(36) (24)(35) (24)(56) (25)(36) #> [41] (25)(34) (25)(46) (36)(45) (34)(56) (35)(46)"},{"path":"/reference/as.function.permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a permutation to a function — as.function.permutation","title":"Coerce a permutation to a function — as.function.permutation","text":"Coerce permutation executable function domain \\(\\left\\lbrace 1,\\ldots,n\\right\\rbrace\\). resulting function vectorised.","code":""},{"path":"/reference/as.function.permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a permutation to a function — as.function.permutation","text":"","code":"# S3 method for class 'permutation' as.function(x, ...)"},{"path":"/reference/as.function.permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a permutation to a function — as.function.permutation","text":"x permutation ... arguments (currently ignored)","code":""},{"path":"/reference/as.function.permutation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce a permutation to a function — as.function.permutation","text":"functionality sometimes known group action.  Formally, suppose set \\(X\\), group \\(G\\), function \\(\\alpha\\colon X\\times G\\longrightarrow X\\).  say \\(\\alpha\\) group action \\(\\alpha(x,e)=e\\) \\(\\alpha(\\alpha(x,g),h)=\\alpha(x,gh)\\).  Writing \\(x\\cdot g\\) \\(\\alpha(x,g)\\) \\(x\\cdot e=x\\) \\((x\\cdot g)\\cdot h=x\\cdot(gh)\\).  dot may omitted giving us \\((xg)h=x(gh)\\).  group permutation group \\(X\\), natural choose \\(\\alpha(x,g)=g(x)\\). package idiom, given permutation g [considered element symmetric group \\(S_n\\)], .function(g) returns function domain \\(\\left[n\\right]=\\left\\lbrace 1,\\ldots,n\\right\\rbrace\\) mapping \\(x\\[n]\\) \\(\\alpha(g,x)=g(x)=xg\\).  example, \\(g=(172)(45)\\) \\(\\alpha(g,7)=g(7)=7g=2\\) similarly \\(\\alpha(g,4)=5\\). Package idiom allows one explicitly coerce g function, use overloaded caret:","code":"(g <- as.cycle(\"(172)(45)\"))     #> [1] (172)(45)     as.function(g)(7)     #> [1] 2     7^g     #> [1] 2"},{"path":"/reference/as.function.permutation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce a permutation to a function — as.function.permutation","text":"Robin K. S. Hankin","code":""},{"path":"/reference/as.function.permutation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coerce a permutation to a function — as.function.permutation","text":"Multiplication permutations loses associativity using functional notation; see examples. Also, note coerced function take argument greater size (qv) permutation. Vignette vignettes/groupaction.Rmd discusses issue.","code":""},{"path":"/reference/as.function.permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce a permutation to a function — as.function.permutation","text":"","code":"x <- cyc_len(3) y <- cyc_len(5)  xfun <- as.function(x) yfun <- as.function(y)  stopifnot(xfun(yfun(2)) == as.function(y*x)(2)) # note transposition of x & y  # postfix notation has the very appealing result x(fg) == (xf)g # Carets are good too, in that x^(fg) == (x^f)^g.  a <- rperm() b <- rperm() stopifnot(2^(a*b) == (2^a)^b)  # it's fully vectorized: as.function(rperm(10,9))(1) #>  [1] 7 7 9 1 7 5 6 3 8 4 as.function(as.cycle(1:9))(sample(9)) #> [1] 2 7 3 8 6 1 9 4 5 as.function(allcyc(5:8))(1:6) #> [1] 1 2 3 4 8 5  # standard recycling rules apply: f <- as.function(allperms(3)) all(f(1:3) == f(c(1:3,1:3))) #> [1] TRUE"},{"path":"/reference/c.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenation of permutations — c","title":"Concatenation of permutations — c","text":"Concatenate words cycles together","code":""},{"path":"/reference/c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenation of permutations — c","text":"","code":"# S3 method for class 'word' c(...) # S3 method for class 'cycle' c(...) # S3 method for class 'permutation' rep(x, ...)"},{"path":"/reference/c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenation of permutations — c","text":"... methods c(), objects     concatenated.  Must type: either     word, cycle x method rep(), permutation object","code":""},{"path":"/reference/c.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Concatenation of permutations — c","text":"Robin K. S. Hankin","code":""},{"path":"/reference/c.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Concatenation of permutations — c","text":"methods c() attempt detect type (word cycle) want conversion expensive. Function rep.permutation() behaves like base::rep() takes arguments, eg times .","code":""},{"path":[]},{"path":"/reference/c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenation of permutations — c","text":"","code":"x <- as.cycle(1:5) y <- cycle(list(list(1:4,8:9),list(1:2)))   # concatenate cycles: c(x,y) #> [1] (12345)    (1234)(89) (12)        # concatenate words: c(rperm(5,3),rperm(6,9))   # size adjusted to maximum size of args #>  [1] ()              (13)            (23)            (13)            #>  [5] (23)            (1732596)       (12349)(5678)   (18593)(24)(67) #>  [9] (156298)(347)   (184927)(365)   (12467385)      #> [coerced from word form]   # repeat words: rep(x, times=3) #> [1] (12345) (12345) (12345)"},{"path":"/reference/capply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply functions to elements of a cycle — capply","title":"Apply functions to elements of a cycle — capply","text":"Function capply() means “cycle apply” modelled   lapply().  applies function every element cycles   argument.","code":""},{"path":"/reference/capply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply functions to elements of a cycle — capply","text":"","code":"capply(X, fun, ...)"},{"path":"/reference/capply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply functions to elements of a cycle — capply","text":"X Permutation, coerced cycle fun Function applied element X ... arguments fun()","code":""},{"path":"/reference/capply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply functions to elements of a cycle — capply","text":"function just convenience wrapper really.","code":""},{"path":"/reference/capply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply functions to elements of a cycle — capply","text":"Returns permutation cycle form","code":""},{"path":"/reference/capply.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply functions to elements of a cycle — capply","text":"Robin K. S. Hankin","code":""},{"path":"/reference/capply.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply functions to elements of a cycle — capply","text":"Function allcyc() nice application   capply().","code":""},{"path":[]},{"path":"/reference/capply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply functions to elements of a cycle — capply","text":"","code":"(x <- rperm()) #>  [1] (1274)(56)    (1372465)     (153264)      (1763254)     (137)(25)(46) #>  [6] (1536274)     (375)         (14)(257)     (24756)       (1647325)     #> [coerced from word form] capply(x,range) #>  [1] (17)(56)     (17)         (16)         (17)         (17)(25)(46) #>  [6] (17)         (37)         (14)(27)     (27)         (17)          capply(x,function(x){x+100}) #>  [1] (101,102,107,104)(105,106)      (101,103,107,102,104,106,105)   #>  [3] (101,105,103,102,106,104)       (101,107,106,103,102,105,104)   #>  [5] (101,103,107)(102,105)(104,106) (101,105,103,106,102,107,104)   #>  [7] (103,107,105)                   (101,104)(102,105,107)          #>  [9] (102,104,107,105,106)           (101,106,104,107,103,102,105)    capply(x,rev) #>  [1] (1472)(56)    (1564273)     (146235)      (1452367)     (173)(25)(46) #>  [6] (1472635)     (357)         (14)(275)     (26574)       (1523746)     all(is.id(capply(x,rev)*x))  # should be TRUE #> [1] TRUE  capply(rcyc(20,5,9),sort) #>  [1] (13479) (12468) (12346) (12389) (12367) (12346) (12456) (23579) (23459) #> [10] (12678) (13467) (13468) (35679) (24689) (13678) (12369) (35789) (12389) #> [19] (12578) (23679)  capply(rcyc(20,5,9),sample)  # still 5-cycles #>  [1] (17234) (38957) (18459) (15936) (16579) (15724) (17895) (39854) (36784) #> [10] (26897) (13862) (13259) (39746) (23946) (39586) (19745) (28594) (17938) #> [19] (35678) (25894)   capply(cyc_len(1:9),\\(x)x[x>4]) #> [1] ()      ()      ()      ()      ()      (56)    (567)   (5678)  (56789)  capply(cyc_len(1:9),\\(x)x^2) #> [1] ()                        (1,4)                     #> [3] (1,4,9)                   (1,4,9,16)                #> [5] (1,4,9,16,25)             (1,4,9,16,25,36)          #> [7] (1,4,9,16,25,36,49)       (1,4,9,16,25,36,49,64)    #> [9] (1,4,9,16,25,36,49,64,81)"},{"path":"/reference/cayley.html","id":null,"dir":"Reference","previous_headings":"","what":"Cayley tables for permutation groups — cayley","title":"Cayley tables for permutation groups — cayley","text":"Produces nice Cayley table subgroup symmetric group   \\(n\\) elements","code":""},{"path":"/reference/cayley.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cayley tables for permutation groups — cayley","text":"","code":"cayley(x)"},{"path":"/reference/cayley.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cayley tables for permutation groups — cayley","text":"x vector permutations cycle form","code":""},{"path":"/reference/cayley.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cayley tables for permutation groups — cayley","text":"square matrix giving group operation","code":""},{"path":"/reference/cayley.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cayley tables for permutation groups — cayley","text":"Cayley's theorem states every group G isomorphic subgroup symmetric group acting G.  context means vector permutations comprise group, can nicely represent structure using table. set x closed multiplication inversion (, x group) function may misbehave.  argument checking performed, particular check elements x unique, even include identity.","code":""},{"path":"/reference/cayley.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cayley tables for permutation groups — cayley","text":"Robin K. S. Hankin","code":""},{"path":"/reference/cayley.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cayley tables for permutation groups — cayley","text":"","code":"## cyclic group of order 4: cayley(as.cycle(1:4)^(0:3)) #>            ()         (1,2,3,4)  (1,3)(2,4) (1,4,3,2)  #> ()         ()         (1,2,3,4)  (1,3)(2,4) (1,4,3,2)  #> (1,2,3,4)  (1,2,3,4)  (1,3)(2,4) (1,4,3,2)  ()         #> (1,3)(2,4) (1,3)(2,4) (1,4,3,2)  ()         (1,2,3,4)  #> (1,4,3,2)  (1,4,3,2)  ()         (1,2,3,4)  (1,3)(2,4)  ## Klein group: K4 <- as.cycle(c(\"()\",\"(12)(34)\",\"(13)(24)\",\"(14)(23)\")) names(K4) <- c(\"00\",\"01\",\"10\",\"11\") cayley(K4) #>    00 01 10 11 #> 00 00 01 10 11 #> 01 01 00 11 10 #> 10 10 11 00 01 #> 11 11 10 01 00   ## S3, the symmetric group on 3 elements: S3 <- as.cycle(c(     \"()\",     \"(12)(35)(46)\", \"(13)(26)(45)\",     \"(14)(25)(36)\", \"(156)(243)\", \"(165)(234)\" )) names(S3) <- c(\"()\",\"(ab)\",\"(ac)\",\"(bc)\",\"(abc)\",\"(acb)\") cayley(S3) #>       ()    (ab)  (ac)  (bc)  (abc) (acb) #> ()    ()    (ab)  (ac)  (bc)  (abc) (acb) #> (ab)  (ab)  ()    (acb) (abc) (bc)  (ac)  #> (ac)  (ac)  (abc) ()    (acb) (ab)  (bc)  #> (bc)  (bc)  (acb) (abc) ()    (ac)  (ab)  #> (abc) (abc) (ac)  (bc)  (ab)  (acb) ()    #> (acb) (acb) (bc)  (ab)  (ac)  ()    (abc)   ## Now an example from the onion package, the quaternion group: if (FALSE) { # \\dontrun{  library(onion)  a <- c(H1,-H1,Hi,-Hi,Hj,-Hj,Hk,-Hk)  X <- word(sapply(1:8,function(k){sapply(1:8,function(l){which((a*a[k])[l]==a)})}))  cayley(X)  # a bit verbose; rename the vector:  names(X) <- letters[1:8]  cayley(X)  # more compact } # }"},{"path":"/reference/commutator.html","id":null,"dir":"Reference","previous_headings":"","what":"Group-theoretic commutator: the dot object — commutator","title":"Group-theoretic commutator: the dot object — commutator","text":"permutations package, dot defined Group-theoretic commutator: \\([x,y]=x^{-1}y^{-1}xy\\).  bit exception usual definition xy-yx (along freegroup package).  Package idiom commutator(x,y) .[x,y]. Jacobi identity make sense context permutations package, Hall-Witt identity obeyed. “dot” object defined discussed inst/dot.Rmd, creates file data/dot.rda.","code":""},{"path":"/reference/commutator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group-theoretic commutator: the dot object — commutator","text":"","code":"commutator(x, y)"},{"path":"/reference/commutator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group-theoretic commutator: the dot object — commutator","text":"x,y Permutation objects, coerced word","code":""},{"path":"/reference/commutator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group-theoretic commutator: the dot object — commutator","text":"Robin K. S. Hankin","code":""},{"path":"/reference/commutator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group-theoretic commutator: the dot object — commutator","text":"","code":".[as.cycle(\"123456789\"),as.cycle(\"12\")] #> [1] (123) #> [coerced from word form]   x <- rperm(10,7) y <- rperm(10,8) z <- rperm(10,9)  uu <-  commutator(commutator(x,y),z^x) * commutator(commutator(z,x),y^z) * commutator(commutator(y,z),x^y)   stopifnot(all(is.id(uu)))  # this is the  Hall-Witt identity   .[x,y] #>  [1] (1735)(24)    (1875243)     (16)(2584)    (1753428)     (1467)(2583)  #>  [6] (1473268)     (16)(237)(45) (157)(23486)  (1743856)     (18)(273564)  #> [coerced from word form]  is.id(.[.[x,y],z^x] * .[.[z,x],y^z] * .[.[y,z],x^y]) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE is.id(.[.[x,-y],z]^y * .[.[y,-z],x]^z * .[.[z,-x],y]^x) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"/reference/conjugate.html","id":null,"dir":"Reference","previous_headings":"","what":"Are two permutations conjugate? — conjugate","title":"Are two permutations conjugate? — conjugate","text":"Returns TRUE two permutations conjugate FALSE otherwise.","code":""},{"path":"/reference/conjugate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are two permutations conjugate? — conjugate","text":"","code":"are_conjugate(x, y) are_conjugate_single(a,b)"},{"path":"/reference/conjugate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are two permutations conjugate? — conjugate","text":"x,y,,b Objects class permutation, coerced cycle form","code":""},{"path":"/reference/conjugate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Are two permutations conjugate? — conjugate","text":"Two permutations conjugate shape.   Function are_conjugate() vectorized user-friendly;   function are_conjugate_single() lower-level operates   length-one permutations. reason  are_conjugate_single() separate function   bundled inside are_conjugate() dealing   identity permutation pain arse.","code":""},{"path":"/reference/conjugate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are two permutations conjugate? — conjugate","text":"Returns vector Booleans","code":""},{"path":"/reference/conjugate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Are two permutations conjugate? — conjugate","text":"Robin K. S. Hankin","code":""},{"path":"/reference/conjugate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Are two permutations conjugate? — conjugate","text":"functionality detects conjugateness comparing shapes two permutations; permutations coerced cycle form function shape() . group action conjugation, \\(x^y\\) y^-1 x  y, documented conjugation. always TRUE.","code":"are_conjugate(x,conjugate(x^y))"},{"path":[]},{"path":"/reference/conjugate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are two permutations conjugate? — conjugate","text":"","code":"as.cycle(\"(123)(45)\") %~% as.cycle(\"(89)(712)\")  # same shape #> [1] TRUE as.cycle(\"(123)(45)\") %~% as.cycle(\"(89)(7124)\") # different shape #> [1] FALSE  are_conjugate(rperm(20,3),rperm(20,3)) #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE #> [13] FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  rperm(20,3) %~% as.cycle(1:3) #>  [1] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  z <- rperm(300,4) stopifnot(all(are_conjugate(z,id)==is.id(z)))  z <- rperm(20) stopifnot(all(z %~% capply(z,sample)))  data(megaminx) stopifnot(all(are_conjugate(megaminx,megaminx^as.cycle(sample(129)))))"},{"path":"/reference/cyclist.html","id":null,"dir":"Reference","previous_headings":"","what":"details of cyclists — cyclist","title":"details of cyclists — cyclist","text":"Various functionality deal cyclists","code":""},{"path":"/reference/cyclist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"details of cyclists — cyclist","text":"","code":"vec2cyclist_single(p) vec2cyclist_single_cpp(p) remove_length_one(x) cyclist2word_single(cyc,n) nicify_cyclist(x,rm1=TRUE, smallest_first=TRUE)"},{"path":"/reference/cyclist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"details of cyclists — cyclist","text":"p Integer vector, interpreted word x,cyc cyclist n function cycle2word_single(), size     permutation induce rm1,smallest_first function nicify_cyclist(),     Boolean, governing whether remove length-1 cycles,     whether place smallest element cycle first     (non-default values used standard_cyclist())","code":""},{"path":"/reference/cyclist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"details of cyclists — cyclist","text":"cyclist object corresponding permutation P.  list elements integer vectors corresponding cycles P.  object informally known cyclist, S3 class corresponding .  general use, one usually deal cyclists : internal low-level objects intended user. object S3 class cycle (possibly named) list cyclists.  NB: unavoidable notational clash .  considering single permutation, “cycle” means group-theoretic cycle [eg \\(1\\longrightarrow 2\\longrightarrow 3\\longrightarrow 1\\)]; considering R objects, “cycle” means “R object class cycle whose elements permutations written cycle form”. elements cyclist disjoint group-theoretic cycles.  Note redundancies inherent: firstly, cycles commute, order immaterial (list ordered); secondly, cycles invariant cyclic permutation.  Heigh ho. cyclist may poorly formed number ways: cycles may include repeats, contain elements common one cycle.  problems detected cyclist_valid().  Also, less serious problems: cycles may include length-one cycles; cycles may start element smallest. issues dealt nicify_cyclist(). Function nicify_cyclist() takes cyclist puts   nice form alter permutation.  takes cyclist   removes length-one cycles; orders cycle   smallest element appears first (, changes (523)   (235)).  orders cycles smallest element.   Function nicify_cyclist() called automatically   cycle().  Remember nicify_cyclist() takes   cyclist! Function remove_length_one() takes cyclist removes   length-one cycles . Function vec2cyclist_single() takes vector integers,   interpreted word, converts cyclist.  Length-one   cycles discarded. Function vec2cyclist_single_cpp() placeholder   function yet written. Function cyclist2word_single() takes cyclist   returns vector corresponding single word.  function   intended everyday use; function cycle2word() much   user-friendly. Function char2cyclist_single() takes character string   like “(342)(19)” turns cyclist,   case list(c(3,4,2),c(1,9)).  function returns cyclist   necessarily canonicalized: might length-one   cycles, cycles might start wrong number   incorrectly ordered.  attempts deal absence commas   sensible way, “(18,19)(2,5)” dealt   appropriately .  function insensitive spaces.  Also, one   can give argument correspond cycle object,   eg char2cyclist_single(\"(94)(32)(19)(1)\") (“9”   repeated).  function return error, catch   kind problem use char2cycle() calls validity   checks. user use char2cycle() executes validity checks   coerces cycle object. See also “cyclist” vignette [type vignette(\"cyclist\") command line] contains details examples.","code":""},{"path":"/reference/cyclist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"details of cyclists — cyclist","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/cyclist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"details of cyclists — cyclist","text":"","code":"vec2cyclist_single(c(7,9,3,5,8,6,1,4,2)) #> [[1]] #> [1] 1 7 #>  #> [[2]] #> [1] 2 9 #>  #> [[3]] #> [1] 4 5 8 #>   char2cyclist_single(\"(342)(19)\") #> [[1]] #> [1] 3 4 2 #>  #> [[2]] #> [1] 1 9 #>   nicify_cyclist(list(c(4, 6), c(7), c(2, 5, 1), c(8, 3))) #> [[1]] #> [1] 1 2 5 #>  #> [[2]] #> [1] 3 8 #>  #> [[3]] #> [1] 4 6 #>  nicify_cyclist(list(c(4, 6), c(7), c(2, 5, 1), c(8, 3)),rm1=TRUE) #> [[1]] #> [1] 1 2 5 #>  #> [[2]] #> [1] 3 8 #>  #> [[3]] #> [1] 4 6 #>   nicify_cyclist(list(c(4, 6), c(7), c(2, 5, 1), c(8, 3)),smallest_first=FALSE,rm1=FALSE) #> [[1]] #> [1] 5 1 2 #>  #> [[2]] #> [1] 6 4 #>  #> [[3]] #> [1] 7 #>  #> [[4]] #> [1] 8 3 #>  nicify_cyclist(list(c(4, 6), c(7), c(2, 5, 1), c(8, 3)),smallest_first=FALSE,rm1=TRUE ) #> [[1]] #> [1] 5 1 2 #>  #> [[2]] #> [1] 6 4 #>  #> [[3]] #> [1] 8 3 #>  nicify_cyclist(list(c(4, 6), c(7), c(2, 5, 1), c(8, 3)),smallest_first=TRUE ,rm1=FALSE) #> [[1]] #> [1] 1 2 5 #>  #> [[2]] #> [1] 3 8 #>  #> [[3]] #> [1] 4 6 #>  #> [[4]] #> [1] 7 #>  nicify_cyclist(list(c(4, 6), c(7), c(2, 5, 1), c(8, 3)),smallest_first=TRUE ,rm1=TRUE ) #> [[1]] #> [1] 1 2 5 #>  #> [[2]] #> [1] 3 8 #>  #> [[3]] #> [1] 4 6 #>     cyclist2word_single(list(c(1,4,3),c(7,8))) #> [1] 4 2 1 3 5 6 8 7"},{"path":"/reference/derangement.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests for a permutation being a derangement — derangement","title":"Tests for a permutation being a derangement — derangement","text":"derangement permutation leaves element fixed.","code":""},{"path":"/reference/derangement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests for a permutation being a derangement — derangement","text":"","code":"is.derangement(x)"},{"path":"/reference/derangement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests for a permutation being a derangement — derangement","text":"x Object tested","code":""},{"path":"/reference/derangement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests for a permutation being a derangement — derangement","text":"vector Booleans corresponding whether permutations derangements .","code":""},{"path":"/reference/derangement.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tests for a permutation being a derangement — derangement","text":"identity permutation problematic potentially zero size. identity element derangement, although (zero-size) identity cycle permutation return TRUE natural R idiom (P != seq_len(size(P))).","code":""},{"path":"/reference/derangement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tests for a permutation being a derangement — derangement","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/derangement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests for a permutation being a derangement — derangement","text":"","code":"allperms(4) #>  [1] ()       (34)     (23)     (234)    (243)    (24)     (12)     (12)(34) #>  [9] (123)    (1234)   (1243)   (124)    (132)    (1342)   (13)     (134)    #> [17] (13)(24) (1324)   (1432)   (142)    (143)    (14)     (1423)   (14)(23) #> [coerced from word form] is.derangement(allperms(4)) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE #> [13] FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  M <- matrix(c(1,2,3,4, 2,3,4,1, 3,2,4,1),byrow=TRUE,ncol=4) M #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    2    3    4    1 #> [3,]    3    2    4    1 is.derangement(word(M)) #> [1] FALSE  TRUE FALSE  is.derangement(rperm(16,4)) #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE #> [13] FALSE FALSE FALSE FALSE"},{"path":"/reference/dodecahedron.html","id":null,"dir":"Reference","previous_headings":"","what":"The dodecahedron group — dodecahedron","title":"The dodecahedron group — dodecahedron","text":"Permutations comprising dodecahedron group either faces edges; also full dodecahedron group","code":""},{"path":"/reference/dodecahedron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The dodecahedron group — dodecahedron","text":"package provides number objects investigating dodecahedral groups: Object dodecahedron_face cycle object 60 elements corresponding permutations faces dodecahedron, numbered 1-12 megaminx net.  Object dodecahedron_edge corresponding object permuting edges dodecahedron. edges indexed lower two adjoining facets megaminx net. Objects full_dodecahedron_face full_dodecahedron_edge give 120 elements full dodecahedron group, , dodecahedron group including reflections.  NB: objects isomorphic S5.","code":""},{"path":"/reference/dodecahedron.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The dodecahedron group — dodecahedron","text":"File zzz_dodecahedron.R really intended human-readable.  source file inst/dodecahedron_group.py inst/full_dodecahedron_group.py contain documented python source code.","code":""},{"path":"/reference/dodecahedron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The dodecahedron group — dodecahedron","text":"","code":"permprod(dodecahedron_face) #> [1] (1,9,3,6,8)(4,10,7,5,12) #> [coerced from word form]"},{"path":"/reference/faro.html","id":null,"dir":"Reference","previous_headings":"","what":"Faro shuffles — faro","title":"Faro shuffles — faro","text":"faro shuffle, faro(),permutation deck \\(2n\\) cards.  cards split two packs, 1:n (n+1):2n, interleaved: cards taken alternately top pack placed face table.  faro -shuffle takes first card 1:n faro -shuffle takes first card (n+1):(2*n). generalized faro shuffle, faro_gen(), splits pack m equal parts applies permutation pack, permutation set packs, interleaving. interleaving simply matrix transpose; possible omit step passing interleave=FALSE.","code":""},{"path":"/reference/faro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Faro shuffles — faro","text":"","code":"faro(n, out = TRUE) faro_gen(n,m,p1=id,p2=id,interleave=TRUE)"},{"path":"/reference/faro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Faro shuffles — faro","text":"n Number cards pack m Number packs p1,p2 Permutations cards packs respectively, coerced     word form interleave Boolean, default TRUE meaning     actually perform interleaving FALSE meaning Boolean, default TRUE meaning return     -shuffle FALSE meaning return -shuffle","code":""},{"path":"/reference/faro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Faro shuffles — faro","text":"Returns permutation word form","code":""},{"path":"/reference/faro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Faro shuffles — faro","text":"Robin K. S. Hankin","code":""},{"path":"/reference/faro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Faro shuffles — faro","text":"","code":"faro(4) #> [1] (157842)(36) #> [coerced from word form] faro(4,FALSE) #> [1] (253)(467) #> [coerced from word form]  faro_gen(9,3) #> [1] (2,10,4)(3,19,7)(5,11,13)(6,20,16)(8,12,22)(9,21,25)(15,23,17)(18,24,26) #> [coerced from word form] faro_gen(7,4,cyc_len(7),cyc_len(4)) #> [1] (1,9,11,25,8,3,23,28)(2,16,5,10,18,20,6,17,13,12,4)(7,24)(14,19,27,22,21)(15,26) #> [coerced from word form] faro_gen(7,4,cyc_len(7),cyc_len(4),interleave=FALSE) #> [1] (1,9,17,25,5,13,21,22,2,10,18,26,6,14,15,23,3,11,19,27,7,8,16,24,4,12,20,28) #> [coerced from word form]  sapply(seq_len(10),function(n){permorder(faro(n,FALSE))}) # OEIS  A002326 #>  [1]  1  2  4  3  6 10 12  4  8 18  plot(as.vector(as.word(faro(10))),type='b')  plot(as.vector(faro_gen(8,5,p1=cyc_len(8)^2,interleave=FALSE)))"},{"path":"/reference/fbin.html","id":null,"dir":"Reference","previous_headings":"","what":"The fundamental bijection — fbin","title":"The fundamental bijection — fbin","text":"Stanley defines fundamental bijection page 30. Given \\(w=(14)(2)(375)(6)\\), Stanley writes standard form (specifically: cycle written largest element first; cycles written increasing order largest element).  Thus obtain \\((2)(41)(6)(753)\\). obtain \\(w^*\\) \\(w\\) writing standard form erasing parentheses (, viewing numbers word); \\(w^*=2416753\\). Given , \\(w\\) may recovered inserting left parenthesis preceding every left--right maximum, right parentheses appropriate. Function standard() takes object class cycle returns list cyclists.  NB return object class “cycle” cycle() calls nicify(). Function standard_cyclist() retains length-one cycles (compare nicify_cyclist(), ).","code":""},{"path":"/reference/fbin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The fundamental bijection — fbin","text":"","code":"standard(cyc,n=NULL) standard_cyclist(x,n=NULL) fbin_single(vec) fbin(W) fbin_inv(cyc)"},{"path":"/reference/fbin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The fundamental bijection — fbin","text":"vec function fbin_single(), integer vector W functions fbin() fbin_inv(), object     class permutation, coerced word cycle form respectively cyc functions fbin_single() standard(),     permutation object coerced cycle form n function standard() standard_cyclist(),     size partition assume, default NULL meaning     use largest element cycle x function standard_cyclist(), cyclist","code":""},{"path":"/reference/fbin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The fundamental bijection — fbin","text":"user-friendly functions fbin() fbin_inv()   perform Stanley's “fundamental bijection”.  Function   fbin() takes word object returns cycle; function   fbin_inv() takes cycle returns word. functions low-level helper functions really   intended user (except possibly standard(), puts   cycle object standard order list form).","code":""},{"path":"/reference/fbin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The fundamental bijection — fbin","text":"R. P. Stanley 2011 Enumerative Combinatorics","code":""},{"path":"/reference/fbin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The fundamental bijection — fbin","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/fbin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The fundamental bijection — fbin","text":"","code":"# Stanley's example w: standard(cycle(list(list(c(1,4),c(3,7,5))))) #> [[1]] #> [[1]][[1]] #> [1] 2 #>  #> [[1]][[2]] #> [1] 4 1 #>  #> [[1]][[3]] #> [1] 6 #>  #> [[1]][[4]] #> [1] 7 5 3 #>  #>   standard_cyclist(list(c(4, 6), c(7), c(2, 5, 1), c(8, 3))) #> [[1]] #> [1] 5 1 2 #>  #> [[2]] #> [1] 6 4 #>  #> [[3]] #> [1] 7 #>  #> [[4]] #> [1] 8 3 #>    w_hat <- c(2,4,1,6,7,5,3)  fbin(w_hat) #> [1] (14)(375) fbin_inv(fbin(w_hat)) #> [1] (1246573) #> [coerced from word form]   x <- rperm(40,9) stopifnot(all(fbin(fbin_inv(x))==x)) stopifnot(all(fbin_inv(fbin(x))==x))"},{"path":"/reference/fixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed elements — fixed","title":"Fixed elements — fixed","text":"Finds elements permutation object fixed","code":""},{"path":"/reference/fixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed elements — fixed","text":"","code":"# S3 method for class 'word' fixed(x) # S3 method for class 'cycle' fixed(x)"},{"path":"/reference/fixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed elements — fixed","text":"x Object class word cycle","code":""},{"path":"/reference/fixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed elements — fixed","text":"Returns Boolean vector corresponding fixed elements permutation.","code":""},{"path":"/reference/fixed.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fixed elements — fixed","text":"function vectorized; given vector permutations, fixed() returns Boolean vector showing elements fixed permutations. function two methods: fixed.word() fixed.cycle(), neither coerce.","code":""},{"path":"/reference/fixed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fixed elements — fixed","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/fixed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed elements — fixed","text":"","code":"fixed(as.cycle(1:3)+as.cycle(8:9))   # elements 4,5,6,7 are fixed #> [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE fixed(id) #> logical(0)   data(megaminx) fixed(megaminx},{"path":"/reference/get1.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve particular cycles or components of cycles — get1","title":"Retrieve particular cycles or components of cycles — get1","text":"Given object class cycle, function get1() returns representative disjoint cycles object's elements. Function get_cyc() returns cycle containing specific element.","code":""},{"path":"/reference/get1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve particular cycles or components of cycles — get1","text":"","code":"get1(x,drop=TRUE) get_cyc(x,elt)"},{"path":"/reference/get1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve particular cycles or components of cycles — get1","text":"x permutation object (coerced cycle class) drop function get1(), argument drop controls     behaviour x length 1.  drop     TRUE, vector representative elements returned;     FALSE, list one vector element returned elt Length-one vector interpreted permutation object","code":""},{"path":"/reference/get1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve particular cycles or components of cycles — get1","text":"Robin K. S. Hankin","code":""},{"path":"/reference/get1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve particular cycles or components of cycles — get1","text":"","code":"data(megaminx) get1(megaminx) #> $White #> [1] 10 11 21 22 23 #>  #> $Purple #> [1] 15 16 17 20 21 #>  #> $DarkYellow #> [1] 17 18 19 30 31 #>  #> $DarkBlue #> [1] 10 11 19 40 41 #>  #> $Red #> [1] 11 12 13 50 51 #>  #> $DarkGreen #> [1] 13 14 15 60 61 #>  #> $LightGreen #> [1] 30 31 39 70 71 #>  #> $Orange #> [1] 27 28 29 80 81 #>  #> $LightBlue #> [1] 25 26 27 90 91 #>  #> $LightYellow #> [1]  53  54  55 100 101 #>  #> $Pink #> [1]  41  42  43 110 111 #>  #> $Grey #> [1]  73  74  75 120 121 #>  get1(megaminx[1]) #> [1] 10 11 21 22 23 get1(megaminx[1],drop=TRUE) #> [1] 10 11 21 22 23  get_cyc(megaminx,11)  #>              White             Purple         DarkYellow           DarkBlue  #>   (11,13,15,17,19)                 ()                 ()  (11,33,79,119,51)  #>                Red          DarkGreen         LightGreen             Orange  #> (11,43,115,105,61)                 ()                 ()                 ()  #>          LightBlue        LightYellow               Pink               Grey  #>                 ()                 ()                 ()                 ()"},{"path":"/reference/id.html","id":null,"dir":"Reference","previous_headings":"","what":"The identity permutation — id","title":"The identity permutation — id","text":"identity permutation leaves every element fixed","code":""},{"path":"/reference/id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The identity permutation — id","text":"","code":"is.id(x) is.id_single_cycle(x) # S3 method for class 'cycle' is.id(x) # S3 method for class 'list' is.id(x) # S3 method for class 'word' is.id(x)"},{"path":"/reference/id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The identity permutation — id","text":"x Object tested","code":""},{"path":"/reference/id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The identity permutation — id","text":"identity permutation problematic potentially zero size.","code":""},{"path":"/reference/id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The identity permutation — id","text":"variable id cycle convenient zero--one matrix. Function .id() returns Boolean TRUE corresponding element identity, FALSE otherwise.  dispatches either .id.cycle() .id.word() appropriate. Function .id.list() tests cyclist identityness.","code":""},{"path":"/reference/id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The identity permutation — id","text":"Robin K. S. Hankin","code":""},{"path":"/reference/id.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The identity permutation — id","text":"identity permutations documented distinct null permutations documented nullperm.Rd.","code":""},{"path":[]},{"path":"/reference/id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The identity permutation — id","text":"","code":"is.id(id) #> [1] TRUE  as.word(id)  # weird #> [1] () #> [coerced from word form]  x <- rperm(10,4) x[3] <- id is.id(x*inverse(x)) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"/reference/inverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse of a permutation — inverse","title":"Inverse of a permutation — inverse","text":"Calculates inverse permutation either word cycle form","code":""},{"path":"/reference/inverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse of a permutation — inverse","text":"","code":"inverse(x) # S3 method for class 'word' inverse(x) # S3 method for class 'cycle' inverse(x) inverse_word_single(W) inverse_cyclist_single(cyc)"},{"path":"/reference/inverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse of a permutation — inverse","text":"x Object class permutation inverted W function inverse_word_single(), vector     corresponding permutation word form (, one row     word object) cyc function inverse_cyclist_single(), cyclist   inverted","code":""},{"path":"/reference/inverse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse of a permutation — inverse","text":"package provides methods invert objects class word (R idiom W[W] <- seq_along(W)) also objects class cycle (idiom lapply(cyc,function(o){c(o[1],rev(o[-1]))})). user use inverse() directly, dispatches either inverse.word() inverse.cycle() appropriate. Sometimes, using idiom x^-1 id/x gives neater code, although may require coercion word form cycle form.","code":""},{"path":"/reference/inverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse of a permutation — inverse","text":"Function inverse() returns object class argument.","code":""},{"path":"/reference/inverse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inverse of a permutation — inverse","text":"Robin K. S. Hankin","code":""},{"path":"/reference/inverse.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inverse of a permutation — inverse","text":"Inversion words ultimately performed function inverse_word_single(): can replaced order() although considerably less efficient, especially small sizes permutations.  One longer-term plans implement C, although clear faster.","code":"inverse_word_single <- function(W){     W[W] <- seq_along(W)     return(W) }"},{"path":[]},{"path":"/reference/inverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse of a permutation — inverse","text":"","code":"x <- rperm(10,6) x #>  [1] (125364)  ()        (156243)  (12)(345) (2643)    (16)      (34)      #>  [8] (2354)    (24)      (1362)    #> [coerced from word form] inverse(x) #>  [1] (146352)  ()        (134265)  (12)(354) (2346)    (16)      (34)      #>  [8] (2453)    (24)      (1263)    #> [coerced from word form]  all(is.id(x*inverse(x)))  # should be TRUE #> [1] TRUE  inverse(as.cycle(matrix(1:8,9,8))) #> [1] ()               (18765432)       (1753)(2864)     (16385274)       #> [5] (15)(26)(37)(48) (14725836)       (1357)(2468)     (12345678)       #> [9] ()"},{"path":"/reference/keepcyc.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep or discard some cycles of a permutation — keepcyc","title":"Keep or discard some cycles of a permutation — keepcyc","text":"Given permutation function returns Boolean specifying   whether cycle acceptable, return permutation retaining   acceptable cycles.","code":""},{"path":"/reference/keepcyc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep or discard some cycles of a permutation — keepcyc","text":"","code":"keepcyc(a, func, ...)"},{"path":"/reference/keepcyc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep or discard some cycles of a permutation — keepcyc","text":"Permutation, coerced cycle func Function applied element ... arguments fun()","code":""},{"path":"/reference/keepcyc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep or discard some cycles of a permutation — keepcyc","text":"Returns permutation cycle form","code":""},{"path":"/reference/keepcyc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Keep or discard some cycles of a permutation — keepcyc","text":"Robin K. S. Hankin","code":""},{"path":"/reference/keepcyc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Keep or discard some cycles of a permutation — keepcyc","text":"Function keepcyc() idempotent.","code":""},{"path":[]},{"path":"/reference/keepcyc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or discard some cycles of a permutation — keepcyc","text":"","code":"keepcyc(rgivenshape(10,2:8),function(x){length(x) == 2})  # retains just transpositions #>  [1] (8,28)  (1,28)  (17,30) (22,31) (14,15) (11,21) (7,28)  (7,34)  (11,18) #> [10] (7,28)  keepcyc(megaminx,function(x){any(x == 100)})              # retains just cycles modifying facet #100 #>                 White                Purple            DarkYellow  #>                    ()                    ()                    ()  #>              DarkBlue                   Red             DarkGreen  #>                    ()                    ()                    ()  #>            LightGreen                Orange             LightBlue  #>                    ()                    ()                    ()  #>           LightYellow                  Pink                  Grey  #> (100,102,104,106,108)                    ()    (74,86,98,100,112)  keepcyc(rperm(100),function(x){max(x)-min(x) < 3})        # retains just cycles with range<3 #>   [1] (12)          ()            ()            ()            ()            #>   [6] ()            ()            ()            (243)(56)     ()            #>  [11] (23)          ()            (45)          ()            ()            #>  [16] ()            ()            (46)          ()            ()            #>  [21] ()            ()            (567)         ()            (123)         #>  [26] ()            ()            ()            ()            ()            #>  [31] ()            ()            ()            ()            ()            #>  [36] (57)          ()            ()            ()            ()            #>  [41] (57)          ()            (46)          ()            ()            #>  [46] (13)          ()            ()            (56)          ()            #>  [51] (35)          (35)          ()            ()            ()            #>  [56] ()            (35)          (34)          (123)(46)(57) (67)          #>  [61] ()            ()            (46)          ()            ()            #>  [66] (45)          ()            ()            ()            ()            #>  [71] ()            ()            ()            ()            (56)          #>  [76] (12)(34)(567) ()            ()            ()            (24)          #>  [81] ()            ()            ()            (35)          ()            #>  [86] (13)          (57)          (24)(57)      (34)          (24)          #>  [91] (23)          ()            ()            ()            ()            #>  [96] ()            ()            ()            ()            ()             f <- function(x,p){all(x<p) || all(x>p)} keepcyc(rgivenshape(9,rep(2:3,9)),f,p=20)                 # only cycles with all entries either <20 or >20 #> [1] (1,7)(9,17)(22,34)(27,36)(33,38,44)(35,41)                     #> [2] (6,10)(22,34,32)(28,31)(33,39)                                 #> [3] (7,17)(14,19)(21,22,26)(23,42)(24,37)(30,43)(31,41)            #> [4] (1,8)(2,10)(11,12)(13,16,14)(21,34,35)(24,26)(27,42)(28,45,31) #> [5] (24,45)(27,34)                                                 #> [6] (3,4)(7,18,16)(28,36,45)(29,31)(30,34)(32,38)                  #> [7] (1,19,17)(4,9,8)(21,44)(22,25,37)(26,43,30)(28,29)(34,42)      #> [8] (1,13)(2,7)(21,37)(22,33)(23,36)(24,26,29)(25,41,35)           #> [9] (3,12)(7,15)(10,17,18)(21,40)(22,35)(31,41)"},{"path":"/reference/length.html","id":null,"dir":"Reference","previous_headings":"","what":"Various vector-like utilities for permutation objects. — length","title":"Various vector-like utilities for permutation objects. — length","text":"Various vector-like utilities permutation objects length, names(), etc","code":""},{"path":"/reference/length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various vector-like utilities for permutation objects. — length","text":"","code":"# S3 method for class 'word' length(x) # S3 method for class 'permutation' length(x) <- value # S3 method for class 'word' names(x) # S3 method for class 'word' names(x) <- value"},{"path":"/reference/length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various vector-like utilities for permutation objects. — length","text":"x permutation object value function names<-.word(), new names","code":""},{"path":"/reference/length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Various vector-like utilities for permutation objects. — length","text":"functions methods word objects; cycle objects use methods lists.  easy confuse length permutation size. possible set length permutation; trouble worth.","code":""},{"path":"/reference/length.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Various vector-like utilities for permutation objects. — length","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various vector-like utilities for permutation objects. — length","text":"","code":"x <- rperm(5,9) x #> [1] (124)(3759)(68)   (176)(28)(35)(49) (16827)(34)       (3485)(697)       #> [5] (1638)(2594)      #> [coerced from word form] names(x) <- letters[1:5] x #>                 a                 b                 c                 d  #>   (124)(3759)(68) (176)(28)(35)(49)       (16827)(34)       (3485)(697)  #>                 e  #>      (1638)(2594)  #> [coerced from word form]  megaminx #>                                                                                            White  #>                 (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)  #>                                                                                           Purple  #>                 (15,67,91,81,35)(16,68,92,82,36)(17,69,93,83,37)(20,22,24,26,28)(21,23,25,27,29)  #>                                                                                       DarkYellow  #>                 (17,29,89,79,47)(18,20,80,70,48)(19,21,81,71,49)(30,32,34,36,38)(31,33,35,37,39)  #>                                                                                         DarkBlue  #>              (10,32,78,118,50)(11,33,79,119,51)(19,31,77,117,59)(40,42,44,46,48)(41,43,45,47,49)  #>                                                                                              Red  #>           (11,43,115,105,61)(12,44,116,106,62)(13,45,117,107,63)(50,52,54,56,58)(51,53,55,57,59)  #>                                                                                        DarkGreen  #>              (13,55,103,93,23)(14,56,104,94,24)(15,57,105,95,25)(60,62,64,66,68)(61,63,65,67,69)  #>                                                                                       LightGreen  #>           (30,88,120,110,40)(31,89,121,111,41)(39,87,129,119,49)(70,72,74,76,78)(71,73,75,77,79)  #>                                                                                           Orange  #>              (27,99,121,71,37)(28,90,122,72,38)(29,91,123,73,39)(80,82,84,86,88)(81,83,85,87,89)  #>                                                                                        LightBlue  #>           (25,65,101,123,83)(26,66,102,124,84)(27,67,103,125,85)(90,92,94,96,98)(91,93,95,97,99)  #>                                                                                      LightYellow  #> (53,113,125,95,63)(54,114,126,96,64)(55,115,127,97,65)(100,102,104,106,108)(101,103,105,107,109)  #>                                                                                             Pink  #> (41,75,127,107,51)(42,76,128,108,52)(43,77,129,109,53)(110,112,114,116,118)(111,113,115,117,119)  #>                                                                                             Grey  #> (73,85,97,109,111)(74,86,98,100,112)(75,87,99,101,113)(120,122,124,126,128)(121,123,125,127,129)  length(megaminx)   # the megaminx group has 12 generators, one per face. #> [1] 12 size(megaminx)     # the megaminx group is a subgroup of S_129. #> [1] 129  names(megaminx) <- NULL   # prints more nicely. megaminx #>  [1] (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)                 #>  [2] (15,67,91,81,35)(16,68,92,82,36)(17,69,93,83,37)(20,22,24,26,28)(21,23,25,27,29)                 #>  [3] (17,29,89,79,47)(18,20,80,70,48)(19,21,81,71,49)(30,32,34,36,38)(31,33,35,37,39)                 #>  [4] (10,32,78,118,50)(11,33,79,119,51)(19,31,77,117,59)(40,42,44,46,48)(41,43,45,47,49)              #>  [5] (11,43,115,105,61)(12,44,116,106,62)(13,45,117,107,63)(50,52,54,56,58)(51,53,55,57,59)           #>  [6] (13,55,103,93,23)(14,56,104,94,24)(15,57,105,95,25)(60,62,64,66,68)(61,63,65,67,69)              #>  [7] (30,88,120,110,40)(31,89,121,111,41)(39,87,129,119,49)(70,72,74,76,78)(71,73,75,77,79)           #>  [8] (27,99,121,71,37)(28,90,122,72,38)(29,91,123,73,39)(80,82,84,86,88)(81,83,85,87,89)              #>  [9] (25,65,101,123,83)(26,66,102,124,84)(27,67,103,125,85)(90,92,94,96,98)(91,93,95,97,99)           #> [10] (53,113,125,95,63)(54,114,126,96,64)(55,115,127,97,65)(100,102,104,106,108)(101,103,105,107,109) #> [11] (41,75,127,107,51)(42,76,128,108,52)(43,77,129,109,53)(110,112,114,116,118)(111,113,115,117,119) #> [12] (73,85,97,109,111)(74,86,98,100,112)(75,87,99,101,113)(120,122,124,126,128)(121,123,125,127,129)"},{"path":"/reference/megaminx.html","id":null,"dir":"Reference","previous_headings":"","what":"megaminx — megaminx","title":"megaminx — megaminx","text":"set generators megaminx group","code":""},{"path":"/reference/megaminx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"megaminx — megaminx","text":"element megaminx corresponds clockwise turn 72 degrees.  See vignette details.  Vector megaminx_colours shows colour facet   start.  Object superflip megaminx operation   flips 30 edges. objects can generated running script   inst/megaminx.R, includes discussion   technical documentation creates file megaminx.rda   resides data/ directory.","code":""},{"path":"/reference/megaminx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"megaminx — megaminx","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/megaminx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"megaminx — megaminx","text":"","code":"data(megaminx) megaminx #>                                                                                            White  #>                 (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)  #>                                                                                           Purple  #>                 (15,67,91,81,35)(16,68,92,82,36)(17,69,93,83,37)(20,22,24,26,28)(21,23,25,27,29)  #>                                                                                       DarkYellow  #>                 (17,29,89,79,47)(18,20,80,70,48)(19,21,81,71,49)(30,32,34,36,38)(31,33,35,37,39)  #>                                                                                         DarkBlue  #>              (10,32,78,118,50)(11,33,79,119,51)(19,31,77,117,59)(40,42,44,46,48)(41,43,45,47,49)  #>                                                                                              Red  #>           (11,43,115,105,61)(12,44,116,106,62)(13,45,117,107,63)(50,52,54,56,58)(51,53,55,57,59)  #>                                                                                        DarkGreen  #>              (13,55,103,93,23)(14,56,104,94,24)(15,57,105,95,25)(60,62,64,66,68)(61,63,65,67,69)  #>                                                                                       LightGreen  #>           (30,88,120,110,40)(31,89,121,111,41)(39,87,129,119,49)(70,72,74,76,78)(71,73,75,77,79)  #>                                                                                           Orange  #>              (27,99,121,71,37)(28,90,122,72,38)(29,91,123,73,39)(80,82,84,86,88)(81,83,85,87,89)  #>                                                                                        LightBlue  #>           (25,65,101,123,83)(26,66,102,124,84)(27,67,103,125,85)(90,92,94,96,98)(91,93,95,97,99)  #>                                                                                      LightYellow  #> (53,113,125,95,63)(54,114,126,96,64)(55,115,127,97,65)(100,102,104,106,108)(101,103,105,107,109)  #>                                                                                             Pink  #> (41,75,127,107,51)(42,76,128,108,52)(43,77,129,109,53)(110,112,114,116,118)(111,113,115,117,119)  #>                                                                                             Grey  #> (73,85,97,109,111)(74,86,98,100,112)(75,87,99,101,113)(120,122,124,126,128)(121,123,125,127,129)  megaminx^5  # should be the identity #>       White      Purple  DarkYellow    DarkBlue         Red   DarkGreen  #>          ()          ()          ()          ()          ()          ()  #>  LightGreen      Orange   LightBlue LightYellow        Pink        Grey  #>          ()          ()          ()          ()          ()          ()  inverse(megaminx)  # turn each face anticlockwise #>                                                                                            White  #>                 (10,18,16,14,12)(11,19,17,15,13)(21,69,57,45,33)(22,60,58,46,34)(23,61,59,47,35)  #>                                                                                           Purple  #>                 (15,35,81,91,67)(16,36,82,92,68)(17,37,83,93,69)(20,28,26,24,22)(21,29,27,25,23)  #>                                                                                       DarkYellow  #>                 (17,47,79,89,29)(18,48,70,80,20)(19,49,71,81,21)(30,38,36,34,32)(31,39,37,35,33)  #>                                                                                         DarkBlue  #>              (10,50,118,78,32)(11,51,119,79,33)(19,59,117,77,31)(40,48,46,44,42)(41,49,47,45,43)  #>                                                                                              Red  #>           (11,61,105,115,43)(12,62,106,116,44)(13,63,107,117,45)(50,58,56,54,52)(51,59,57,55,53)  #>                                                                                        DarkGreen  #>              (13,23,93,103,55)(14,24,94,104,56)(15,25,95,105,57)(60,68,66,64,62)(61,69,67,65,63)  #>                                                                                       LightGreen  #>           (30,40,110,120,88)(31,41,111,121,89)(39,49,119,129,87)(70,78,76,74,72)(71,79,77,75,73)  #>                                                                                           Orange  #>              (27,37,71,121,99)(28,38,72,122,90)(29,39,73,123,91)(80,88,86,84,82)(81,89,87,85,83)  #>                                                                                        LightBlue  #>           (25,83,123,101,65)(26,84,124,102,66)(27,85,125,103,67)(90,98,96,94,92)(91,99,97,95,93)  #>                                                                                      LightYellow  #> (53,63,95,125,113)(54,64,96,126,114)(55,65,97,127,115)(100,108,106,104,102)(101,109,107,105,103)  #>                                                                                             Pink  #> (41,51,107,127,75)(42,52,108,128,76)(43,53,109,129,77)(110,118,116,114,112)(111,119,117,115,113)  #>                                                                                             Grey  #> (73,111,109,97,85)(74,112,100,98,86)(75,113,101,99,87)(120,128,126,124,122)(121,129,127,125,123)    megaminx_colours[permprod(megaminx)]  # risky but elegant... #>   [1] Black       Black       Black       Black       Black       Black       #>   [7] Black       Black       Black       DarkBlue    DarkBlue    Red         #>  [13] DarkGreen   DarkGreen   DarkGreen   Purple      Purple      DarkYellow  #>  [19] DarkYellow  Purple      DarkYellow  DarkYellow  Red         DarkGreen   #>  [25] LightBlue   LightBlue   LightGreen  Orange      Purple      LightGreen  #>  [31] DarkYellow  DarkYellow  DarkBlue    DarkBlue    White       White       #>  [37] LightBlue   Orange      LightGreen  LightGreen  LightYellow Pink        #>  [43] Pink        DarkBlue    Red         Red         White       White       #>  [49] Orange      White       LightGreen  Pink        LightBlue   LightYellow #>  [55] Red         Red         Purple      DarkGreen   White       White       #>  [61] White       White       Pink        LightYellow LightYellow DarkGreen   #>  [67] Orange      LightBlue   White       DarkYellow  DarkYellow  Orange      #>  [73] Grey        Grey        Grey        LightGreen  Red         Pink        #>  [79] Purple      DarkYellow  DarkGreen   Purple      Orange      LightBlue   #>  [85] LightBlue   Orange      Pink        Grey        DarkBlue    Grey        #>  [91] DarkYellow  Purple      Purple      Purple      Red         LightYellow #>  [97] LightYellow LightBlue   Grey        LightYellow Grey        Grey        #> [103] DarkGreen   DarkGreen   DarkBlue    Red         LightYellow Pink        #> [109] Pink        DarkBlue    Orange      Pink        Grey        Grey        #> [115] DarkGreen   Red         DarkBlue    DarkBlue    Pink        LightGreen  #> [121] LightGreen  LightGreen  Orange      Orange      LightBlue   LightBlue   #> [127] LightYellow LightYellow LightGreen   W    # turn the White face one click clockwise (colour names as per the #>                                                                            White  #> (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)       # table above)   megaminx_colours[as.word(W,129)]      # it is safer to ensure a size-129 word; #>   [1] Black       Black       Black       Black       Black       Black       #>   [7] Black       Black       Black       White       White       White       #>  [13] White       White       White       White       White       White       #>  [19] White       Purple      DarkYellow  DarkYellow  DarkYellow  Purple      #>  [25] Purple      Purple      Purple      Purple      Purple      DarkYellow  #>  [31] DarkYellow  DarkYellow  DarkBlue    DarkBlue    DarkBlue    DarkYellow  #>  [37] DarkYellow  DarkYellow  DarkYellow  DarkBlue    DarkBlue    DarkBlue    #>  [43] DarkBlue    DarkBlue    Red         Red         Red         DarkBlue    #>  [49] DarkBlue    Red         Red         Red         Red         Red         #>  [55] Red         Red         DarkGreen   DarkGreen   DarkGreen   Purple      #>  [61] Purple      DarkGreen   DarkGreen   DarkGreen   DarkGreen   DarkGreen   #>  [67] DarkGreen   DarkGreen   Purple      LightGreen  LightGreen  LightGreen  #>  [73] LightGreen  LightGreen  LightGreen  LightGreen  LightGreen  LightGreen  #>  [79] LightGreen  Orange      Orange      Orange      Orange      Orange      #>  [85] Orange      Orange      Orange      Orange      Orange      LightBlue   #>  [91] LightBlue   LightBlue   LightBlue   LightBlue   LightBlue   LightBlue   #>  [97] LightBlue   LightBlue   LightBlue   LightYellow LightYellow LightYellow #> [103] LightYellow LightYellow LightYellow LightYellow LightYellow LightYellow #> [109] LightYellow Pink        Pink        Pink        Pink        Pink        #> [115] Pink        Pink        Pink        Pink        Pink        Grey        #> [121] Grey        Grey        Grey        Grey        Grey        Grey        #> [127] Grey        Grey        Grey        megaminx_colours[as.word(W)]          # but the shorter version will work #>  [1] Black      Black      Black      Black      Black      Black      #>  [7] Black      Black      Black      White      White      White      #> [13] White      White      White      White      White      White      #> [19] White      Purple     DarkYellow DarkYellow DarkYellow Purple     #> [25] Purple     Purple     Purple     Purple     Purple     DarkYellow #> [31] DarkYellow DarkYellow DarkBlue   DarkBlue   DarkBlue   DarkYellow #> [37] DarkYellow DarkYellow DarkYellow DarkBlue   DarkBlue   DarkBlue   #> [43] DarkBlue   DarkBlue   Red        Red        Red        DarkBlue   #> [49] DarkBlue   Red        Red        Red        Red        Red        #> [55] Red        Red        DarkGreen  DarkGreen  DarkGreen  Purple     #> [61] Purple     DarkGreen  DarkGreen  DarkGreen  DarkGreen  DarkGreen  #> [67] DarkGreen  DarkGreen  Purple       # Now some superflip stuff:  X <- W * Pu^(-1) * W * Pu^2 * DY^(-2)  Y <- LG^(-1) * DB^(-1) * LB * DG       Z <- Gy^(-2) * LB * LG^(-1) * Pi^(-1) * LY^(-1)   sjc3 <- (X^6)^Y * Z^9  # superflip (Jeremy Clark)   p1 <- (DG^2 * W^4 * DB^3 * W^3 * DB^2 * W^2 * DB^2 * R * W * R)^3 m1 <- p1^(Pi^3)  p2 <- (O^2 * LG^4 * DB^3 * LG^3 * DB^2 * LG^2 * DB^2 * DY * LG * DY)^3 m2 <- p2^(DB^2)  p3 <- (LB^2 * LY^4 * Gy * Pi^3 * LY * Gy^4)^3 m3 <- p3^LB  # m1,m2 are 32 moves, p3 is 20, total = 84  stopifnot(m1+m2+m3==sjc3)"},{"path":"/reference/megaminx_plotter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting routine for megaminx sequences — megaminx_plotter","title":"Plotting routine for megaminx sequences — megaminx_plotter","text":"Plots coloured diagram dodecahedron net representing megaminx","code":""},{"path":"/reference/megaminx_plotter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting routine for megaminx sequences — megaminx_plotter","text":"","code":"megaminx_plotter(megperm=id,offset=c(0,0),M=diag(2),setup=TRUE,...)"},{"path":"/reference/megaminx_plotter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting routine for megaminx sequences — megaminx_plotter","text":"megperm Permutation plotted offset,M Offset transformation matrix, see details setup Boolean, default TRUE meaning set     plot plot() statement, FALSE meaning     plot points pre-existing canvas ... arguments passed polygon()","code":""},{"path":"/reference/megaminx_plotter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting routine for megaminx sequences — megaminx_plotter","text":"Function megaminx_plotter() plots coloured diagram   dodecahedron net representing megaminx.  argument may   specified sequence turns applied megaminx   START. function uses rather complicated internal variables   pentagons, triangles, quads whose meaning   genesis discussed heavily-documented file inst/guide.R. diagram centered common vertex triangles 28   82 \\((0,0)\\).","code":""},{"path":"/reference/megaminx_plotter.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting routine for megaminx sequences — megaminx_plotter","text":"Robin K. S. Hankin","code":""},{"path":"/reference/megaminx_plotter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting routine for megaminx sequences — megaminx_plotter","text":"","code":"data(\"megaminx\")  megaminx_plotter()  # START  megaminx_plotter(W) # after turning the White face one click  megaminx_plotter(superflip)   size <- 0.95 o <- 290  if (FALSE) { # \\dontrun{ pdf(file=\"fig1.pdf\") megaminx_plotter(M=size*diag(2),offset=c(-o,0),setup=TRUE) megaminx_plotter(W,M=size*diag(2),offset=c(+o,0),setup=FALSE) dev.off()  pdf(file=\"fig2.pdf\") p <- permprod(sample(megaminx,100,replace=TRUE)) megaminx_plotter(p,M=size*diag(2),offset=c(-o,0),setup=TRUE) megaminx_plotter(superflip,M=size*diag(2),offset=c(+o,0),setup=FALSE) dev.off() } # }"},{"path":"/reference/nullperm.html","id":null,"dir":"Reference","previous_headings":"","what":"Null permutations — nullperm","title":"Null permutations — nullperm","text":"Null permutations equivalent NULL","code":""},{"path":"/reference/nullperm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null permutations — nullperm","text":"","code":"nullcycle nullword"},{"path":"/reference/nullperm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Null permutations — nullperm","text":"Object nullcycle empty list coerced class   cycle, specifically cycle(list()) Object nullword zero-row matrix, coerced word,   specifically word(matrix(integer(0),0,0))","code":""},{"path":"/reference/nullperm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Null permutations — nullperm","text":"objects deal case length-zero permutation extracted.  behaviour null objects entirely consistent.","code":""},{"path":"/reference/nullperm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Null permutations — nullperm","text":"objects documented distinct identity   permutation, id, documented separately.","code":""},{"path":[]},{"path":"/reference/nullperm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Null permutations — nullperm","text":"","code":"rperm(10,4)[0]  # null word #> cycle(0) #> [coerced from word form]  as.cycle(1:5)[0]  # null cycle #> cycle(0)  data(megaminx) c(NULL,megaminx)      # probably not what the user intended... #> $White #> $White[[1]] #> [1] 10 12 14 16 18 #>  #> $White[[2]] #> [1] 11 13 15 17 19 #>  #> $White[[3]] #> [1] 21 33 45 57 69 #>  #> $White[[4]] #> [1] 22 34 46 58 60 #>  #> $White[[5]] #> [1] 23 35 47 59 61 #>  #>  #> $Purple #> $Purple[[1]] #> [1] 15 67 91 81 35 #>  #> $Purple[[2]] #> [1] 16 68 92 82 36 #>  #> $Purple[[3]] #> [1] 17 69 93 83 37 #>  #> $Purple[[4]] #> [1] 20 22 24 26 28 #>  #> $Purple[[5]] #> [1] 21 23 25 27 29 #>  #>  #> $DarkYellow #> $DarkYellow[[1]] #> [1] 17 29 89 79 47 #>  #> $DarkYellow[[2]] #> [1] 18 20 80 70 48 #>  #> $DarkYellow[[3]] #> [1] 19 21 81 71 49 #>  #> $DarkYellow[[4]] #> [1] 30 32 34 36 38 #>  #> $DarkYellow[[5]] #> [1] 31 33 35 37 39 #>  #>  #> $DarkBlue #> $DarkBlue[[1]] #> [1]  10  32  78 118  50 #>  #> $DarkBlue[[2]] #> [1]  11  33  79 119  51 #>  #> $DarkBlue[[3]] #> [1]  19  31  77 117  59 #>  #> $DarkBlue[[4]] #> [1] 40 42 44 46 48 #>  #> $DarkBlue[[5]] #> [1] 41 43 45 47 49 #>  #>  #> $Red #> $Red[[1]] #> [1]  11  43 115 105  61 #>  #> $Red[[2]] #> [1]  12  44 116 106  62 #>  #> $Red[[3]] #> [1]  13  45 117 107  63 #>  #> $Red[[4]] #> [1] 50 52 54 56 58 #>  #> $Red[[5]] #> [1] 51 53 55 57 59 #>  #>  #> $DarkGreen #> $DarkGreen[[1]] #> [1]  13  55 103  93  23 #>  #> $DarkGreen[[2]] #> [1]  14  56 104  94  24 #>  #> $DarkGreen[[3]] #> [1]  15  57 105  95  25 #>  #> $DarkGreen[[4]] #> [1] 60 62 64 66 68 #>  #> $DarkGreen[[5]] #> [1] 61 63 65 67 69 #>  #>  #> $LightGreen #> $LightGreen[[1]] #> [1]  30  88 120 110  40 #>  #> $LightGreen[[2]] #> [1]  31  89 121 111  41 #>  #> $LightGreen[[3]] #> [1]  39  87 129 119  49 #>  #> $LightGreen[[4]] #> [1] 70 72 74 76 78 #>  #> $LightGreen[[5]] #> [1] 71 73 75 77 79 #>  #>  #> $Orange #> $Orange[[1]] #> [1]  27  99 121  71  37 #>  #> $Orange[[2]] #> [1]  28  90 122  72  38 #>  #> $Orange[[3]] #> [1]  29  91 123  73  39 #>  #> $Orange[[4]] #> [1] 80 82 84 86 88 #>  #> $Orange[[5]] #> [1] 81 83 85 87 89 #>  #>  #> $LightBlue #> $LightBlue[[1]] #> [1]  25  65 101 123  83 #>  #> $LightBlue[[2]] #> [1]  26  66 102 124  84 #>  #> $LightBlue[[3]] #> [1]  27  67 103 125  85 #>  #> $LightBlue[[4]] #> [1] 90 92 94 96 98 #>  #> $LightBlue[[5]] #> [1] 91 93 95 97 99 #>  #>  #> $LightYellow #> $LightYellow[[1]] #> [1]  53 113 125  95  63 #>  #> $LightYellow[[2]] #> [1]  54 114 126  96  64 #>  #> $LightYellow[[3]] #> [1]  55 115 127  97  65 #>  #> $LightYellow[[4]] #> [1] 100 102 104 106 108 #>  #> $LightYellow[[5]] #> [1] 101 103 105 107 109 #>  #>  #> $Pink #> $Pink[[1]] #> [1]  41  75 127 107  51 #>  #> $Pink[[2]] #> [1]  42  76 128 108  52 #>  #> $Pink[[3]] #> [1]  43  77 129 109  53 #>  #> $Pink[[4]] #> [1] 110 112 114 116 118 #>  #> $Pink[[5]] #> [1] 111 113 115 117 119 #>  #>  #> $Grey #> $Grey[[1]] #> [1]  73  85  97 109 111 #>  #> $Grey[[2]] #> [1]  74  86  98 100 112 #>  #> $Grey[[3]] #> [1]  75  87  99 101 113 #>  #> $Grey[[4]] #> [1] 120 122 124 126 128 #>  #> $Grey[[5]] #> [1] 121 123 125 127 129 #>  #>  c(nullcycle,megaminx) # more useful. #>                                                                                            White  #>                 (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)  #>                                                                                           Purple  #>                 (15,67,91,81,35)(16,68,92,82,36)(17,69,93,83,37)(20,22,24,26,28)(21,23,25,27,29)  #>                                                                                       DarkYellow  #>                 (17,29,89,79,47)(18,20,80,70,48)(19,21,81,71,49)(30,32,34,36,38)(31,33,35,37,39)  #>                                                                                         DarkBlue  #>              (10,32,78,118,50)(11,33,79,119,51)(19,31,77,117,59)(40,42,44,46,48)(41,43,45,47,49)  #>                                                                                              Red  #>           (11,43,115,105,61)(12,44,116,106,62)(13,45,117,107,63)(50,52,54,56,58)(51,53,55,57,59)  #>                                                                                        DarkGreen  #>              (13,55,103,93,23)(14,56,104,94,24)(15,57,105,95,25)(60,62,64,66,68)(61,63,65,67,69)  #>                                                                                       LightGreen  #>           (30,88,120,110,40)(31,89,121,111,41)(39,87,129,119,49)(70,72,74,76,78)(71,73,75,77,79)  #>                                                                                           Orange  #>              (27,99,121,71,37)(28,90,122,72,38)(29,91,123,73,39)(80,82,84,86,88)(81,83,85,87,89)  #>                                                                                        LightBlue  #>           (25,65,101,123,83)(26,66,102,124,84)(27,67,103,125,85)(90,92,94,96,98)(91,93,95,97,99)  #>                                                                                      LightYellow  #> (53,113,125,95,63)(54,114,126,96,64)(55,115,127,97,65)(100,102,104,106,108)(101,103,105,107,109)  #>                                                                                             Pink  #> (41,75,127,107,51)(42,76,128,108,52)(43,77,129,109,53)(110,112,114,116,118)(111,113,115,117,119)  #>                                                                                             Grey  #> (73,85,97,109,111)(74,86,98,100,112)(75,87,99,101,113)(120,122,124,126,128)(121,123,125,127,129)  c(id,megaminx)        # also useful. #>                                                                                                   #>                                                                                               ()  #>                                                                                            White  #>                 (10,12,14,16,18)(11,13,15,17,19)(21,33,45,57,69)(22,34,46,58,60)(23,35,47,59,61)  #>                                                                                           Purple  #>                 (15,67,91,81,35)(16,68,92,82,36)(17,69,93,83,37)(20,22,24,26,28)(21,23,25,27,29)  #>                                                                                       DarkYellow  #>                 (17,29,89,79,47)(18,20,80,70,48)(19,21,81,71,49)(30,32,34,36,38)(31,33,35,37,39)  #>                                                                                         DarkBlue  #>              (10,32,78,118,50)(11,33,79,119,51)(19,31,77,117,59)(40,42,44,46,48)(41,43,45,47,49)  #>                                                                                              Red  #>           (11,43,115,105,61)(12,44,116,106,62)(13,45,117,107,63)(50,52,54,56,58)(51,53,55,57,59)  #>                                                                                        DarkGreen  #>              (13,55,103,93,23)(14,56,104,94,24)(15,57,105,95,25)(60,62,64,66,68)(61,63,65,67,69)  #>                                                                                       LightGreen  #>           (30,88,120,110,40)(31,89,121,111,41)(39,87,129,119,49)(70,72,74,76,78)(71,73,75,77,79)  #>                                                                                           Orange  #>              (27,99,121,71,37)(28,90,122,72,38)(29,91,123,73,39)(80,82,84,86,88)(81,83,85,87,89)  #>                                                                                        LightBlue  #>           (25,65,101,123,83)(26,66,102,124,84)(27,67,103,125,85)(90,92,94,96,98)(91,93,95,97,99)  #>                                                                                      LightYellow  #> (53,113,125,95,63)(54,114,126,96,64)(55,115,127,97,65)(100,102,104,106,108)(101,103,105,107,109)  #>                                                                                             Pink  #> (41,75,127,107,51)(42,76,128,108,52)(43,77,129,109,53)(110,112,114,116,118)(111,113,115,117,119)  #>                                                                                             Grey  #> (73,85,97,109,111)(74,86,98,100,112)(75,87,99,101,113)(120,122,124,126,128)(121,123,125,127,129)"},{"path":"/reference/orbit.html","id":null,"dir":"Reference","previous_headings":"","what":"Orbits of integers — orbit","title":"Orbits of integers — orbit","text":"Finds orbit given integer","code":""},{"path":"/reference/orbit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orbits of integers — orbit","text":"","code":"orbit_single(c1,n1) orbit(cyc,n)"},{"path":"/reference/orbit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orbits of integers — orbit","text":"c1,n1 (low-level) function orbit_single(), cyclist     integer vector respectively cyc,n (vectorized) function orbit(), cyc     coerced cycle, n integer vector","code":""},{"path":"/reference/orbit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orbits of integers — orbit","text":"Given cyclist c1 integer n1, function   orbit_single() returns single cycle containing integer   n1.  low-level function, intended   end-user. Function orbit() vectorized equivalent   orbit_single().  Vectorization inherited   cbind(). orbit fixed point \\(p\\) \\(\\left\\lbrace   p\\right\\rbrace\\); code uses ugly hack ensure   case.","code":""},{"path":"/reference/orbit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Orbits of integers — orbit","text":"Robin K. S. Hankin","code":""},{"path":"/reference/orbit.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Orbits of integers — orbit","text":"Orbits useful general group theoretic context.  Consider   finite group \\(G\\) acting set \\(X\\), $$\\alpha\\colon G\\times X\\longrightarrow X.$$ Writing \\(\\alpha(g,x)=gx\\), define   \\(\\alpha\\) group action \\(ex=x\\)   \\(g(hx)=(gh)x\\) \\(g,h\\G\\)   \\(e\\) group identity.  \\(x\\X\\)   define orbit \\(Gx\\) \\(x\\) set   elements \\(X\\) \\(x\\) can moved element   \\(G\\).  Symbolically: $$Gx=\\left\\lbrace gx\\colon g\\G\\right\\rbrace$$ Now, abuse notation slightly.  context permutation   groups, consider fixed permutation \\(\\sigma\\).    consider group \\(G=\\left\\langle\\sigma\\right\\rangle\\),   , group generated \\(\\sigma\\);   group action \\(G\\) set \\(X=\\left\\lbrace   1,2,\\ldots,n\\right\\rbrace\\) obvious definition   \\(\\sigma x=\\sigma(x)\\) \\(\\sigma\\G\\)   \\(x\\X\\).  clearly group action   \\(\\operatorname{id}(x)=x\\) \\(\\sigma(\\mu   x)=(\\sigma\\mu)x\\). $$Gx=\\bigcup_{\\\\mathbb{Z}}\\sigma^(x)$$ Expressing \\(\\sigma\\) cycle form makes easy see   orbit element \\(x\\) \\(X\\) just   members cycle containing \\(x\\).  example,   consider \\(\\sigma=(26)(348)\\) \\(x=4\\).   $$G=\\left\\langle(26)(348)\\right\\rangle =     \\bigcup_{\\\\mathbb{Z}}[(26)(348)]^$$ interested effects \\(x=4\\),   need consider cycle \\((348)\\): cycle   affects \\(x=4\\), \\((26)\\) cycle may ignored   affect element 4.  $$G4=\\bigcup_{\\\\mathbb{Z}}(348)^(4)=\\left\\lbrace   3,4,8\\right\\rbrace$$ [observe slight notational abuse : “\\((348)\\)”   means “function \\(f(\\cdot)\\)   \\(f(3)=4\\), \\(f(4)=8\\), \\(f(8)=3\\)”].","code":""},{"path":[]},{"path":"/reference/orbit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orbits of integers — orbit","text":"","code":"orbit(as.cycle(\"(123)\"),1:5) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 1 2 3 #>  #> [[3]] #> [1] 1 2 3 #>  #> [[4]] #> [1] 4 #>  #> [[5]] #> [1] 5 #>  orbit(as.cycle(c(\"(12)\",\"(123)(45)\",\"(2345)\")),1) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 1 2 3 #>  #> [[3]] #> [1] 1 #>  orbit(as.cycle(c(\"(12)\",\"(123)(45)\",\"(2345)\")),1:3) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 1 2 3 #>  #> [[3]] #> [1] 2 3 4 5 #>   data(megaminx) orbit(megaminx,13) #> $White #> White21 White22 White23 White24 White25  #>      11      13      15      17      19  #>  #> $Purple #> [1] 13 #>  #> $DarkYellow #> [1] 13 #>  #> $DarkBlue #> [1] 13 #>  #> $Red #> Red31 Red32 Red33 Red34 Red35  #>    13    45   117   107    63  #>  #> $DarkGreen #> DarkGreen11 DarkGreen12 DarkGreen13 DarkGreen14 DarkGreen15  #>          13          55         103          93          23  #>  #> $LightGreen #> [1] 13 #>  #> $Orange #> [1] 13 #>  #> $LightBlue #> [1] 13 #>  #> $LightYellow #> [1] 13 #>  #> $Pink #> [1] 13 #>  #> $Grey #> [1] 13 #>"},{"path":"/reference/outer.html","id":null,"dir":"Reference","previous_headings":"","what":"Outer product of vectors of permutations — outer","title":"Outer product of vectors of permutations — outer","text":"outer product two vectors permutations pairwise product element first element second.","code":""},{"path":"/reference/outer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Outer product of vectors of permutations — outer","text":"works much way base::outer().  third argument, FUN, outer(X,Y,FUN=\"*\") regular group-theoretic multiplication can replaced + sure cycles X Y distinct, see examples.  element returned matrix one-element list. print method may room improvement.","code":""},{"path":"/reference/outer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Outer product of vectors of permutations — outer","text":"Robin K. S. Hankin","code":""},{"path":"/reference/outer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Outer product of vectors of permutations — outer","text":"","code":"(M <- outer(rperm(),rperm())) #>       [,1]          [,2]          [,3]          [,4]          [,5]          #>  [1,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [2,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [3,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [4,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [5,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [6,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [7,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [8,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [9,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #> [10,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>       [,6]          [,7]          [,8]          [,9]          [,10]         #>  [1,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [2,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [3,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [4,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [5,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [6,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [7,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [8,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #>  [9,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 #> [10,] permutation,7 permutation,7 permutation,7 permutation,7 permutation,7 outer(cyc_len(4) + 0:3, cyc_len(4) + 100:101,\"+\")  # OK because the cycles are distinct #>      [,1]                           [,2]                           #> [1,] 1, 2, 3, 4, 101, 102, 103, 104 1, 2, 3, 4, 102, 103, 104, 105 #> [2,] 2, 3, 4, 5, 101, 102, 103, 104 2, 3, 4, 5, 102, 103, 104, 105 #> [3,] 3, 4, 5, 6, 101, 102, 103, 104 3, 4, 5, 6, 102, 103, 104, 105 #> [4,] 4, 5, 6, 7, 101, 102, 103, 104 4, 5, 6, 7, 102, 103, 104, 105  do.call(\"c\",M) # c(M) gives a list and unlist(a) gives a numeric vector #>   [1] (1367)        (15)(27)(36)  (1352)(467)   (134)(67)     (26)(345)     #>   [6] (1524736)     (162453)      (1357462)     (176243)      (1546327)     #>  [11] (142)(3675)   (136427)      (146725)      (14532)(67)   (154326)      #>  [16] (1365)(47)    (16)(354)     (146)(257)    (176)(35)     (13)(275)(46) #>  [21] (15)(2476)    (47)(56)      (1543)(26)    (15)(246)(37) (164)(237)    #>  [26] (2754)        (1364)(27)    (152643)      (1273645)     (34)(576)     #>  [31] (253)(467)    (1327546)     (24)(67)      (25367)       (14365)       #>  [36] (132647)      (1265)(34)    (24)(576)     (1726534)     (1356)(274)   #>  [41] (13267)       (15)(2763)    (1356742)     (134)(267)    (345)         #>  [46] (156)(2473)   (12453)       (135742)      (17243)       (15427)(36)   #>  [51] (12)(34)(57)  (17)(26)(34)  (125)(37)     (12)(457)     (152476)      #>  [56] (1723465)     (1476)(235)   (1256)(37)    (16)(23574)   (1753)(26)    #>  [61] (26)(35)      (13576)       (27456)       (26)(3475)    (1725)(34)    #>  [66] (13567)(24)   (15)(2437)    (2745)        (124)(375)    (136)(45)     #>  [71] (12)(3465)    (1346257)     (12765)       (12)(365)(47) (1752436)     #>  [76] (1345)(267)   (1437526)     (1276)        (1537426)     (13)(256)     #>  [81] (157)(2634)   (1765)(234)   (156372)      (1574)(263)   (2473)        #>  [86] (1756)(34)    (1473)        (15372)       (13)(457)     (17)(2365)    #>  [91] (15637)(24)   (165)(2374)   (15472)(36)   (156324)      (273)(46)     #>  [96] (16)(3754)    (173)(46)     (1536472)     (13)(456)     (1652347)     #> [coerced from word form]"},{"path":"/reference/perm_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation matrices — perm_matrix","title":"Permutation matrices — perm_matrix","text":"Given permutation, coerce word form return corresponding permutation matrix","code":""},{"path":"/reference/perm_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation matrices — perm_matrix","text":"","code":"perm_matrix(p,s=size(p)) is.perm_matrix(M) pm_to_perm(M)"},{"path":"/reference/perm_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation matrices — perm_matrix","text":"p Permutation, coerced word form, length 1 s Size permutation matrix permutation M Permutation matrix","code":""},{"path":"/reference/perm_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation matrices — perm_matrix","text":"Given permutation p size \\(s\\), function   perm_matrix() returns square matrix \\(s\\) rows   \\(s\\) columns.  Entries either 0 1; row column   exactly one entry 1 rest zero. Row column names permutation matrix integers;   makes printed version compact. Function pm_to_perm() takes permutation matrix returns   equivalent permutation word form.","code":""},{"path":"/reference/perm_matrix.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Permutation matrices — perm_matrix","text":"Given word p size s, idiom   perm_matrix() boils  used explicitly representations vignette.    another way:  might useful sometime. See also representation order_of_ops vignettes,   discuss permutation matrices.","code":"M <- diag(s)     M[p,] M <- diag(s)     M[cbind(seq_len(s),p)] <- 1     M"},{"path":"/reference/perm_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permutation matrices — perm_matrix","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/perm_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation matrices — perm_matrix","text":"","code":"perm_matrix(rperm(1,9)) #>   1 2 3 4 5 6 7 8 9 #> 1 0 0 0 1 0 0 0 0 0 #> 2 1 0 0 0 0 0 0 0 0 #> 3 0 1 0 0 0 0 0 0 0 #> 4 0 0 0 0 0 0 0 0 1 #> 5 0 0 0 0 0 0 1 0 0 #> 6 0 0 0 0 0 1 0 0 0 #> 7 0 0 0 0 1 0 0 0 0 #> 8 0 0 0 0 0 0 0 1 0 #> 9 0 0 1 0 0 0 0 0 0   p1 <- rperm(1,40) M1 <- perm_matrix(p1) p2 <- rperm(1,40) M2 <- perm_matrix(p2)  stopifnot(is.perm_matrix(M1))  stopifnot(all(solve(M1) == perm_matrix(inverse(p1)))) stopifnot(all(M1 %*% M2 == perm_matrix(p1*p2)))   stopifnot(p1 == pm_to_perm(perm_matrix(p1)))  data(\"megaminx\") image(perm_matrix(permprod(megaminx)),asp=1,axes=FALSE)"},{"path":"/reference/permorder.html","id":null,"dir":"Reference","previous_headings":"","what":"The order of a permutation — permorder","title":"The order of a permutation — permorder","text":"Returns order permutation \\(P\\): smallest strictly positive integer \\(n\\) \\(P^n\\) identity.","code":""},{"path":"/reference/permorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The order of a permutation — permorder","text":"","code":"permorder(x, singly = TRUE)"},{"path":"/reference/permorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The order of a permutation — permorder","text":"x Permutation, coerced cycle form singly Boolean, default TRUE meaning return     order element vector, FALSE meaning     return order vector (, smallest     strictly positive integer (x^n==id)).","code":""},{"path":"/reference/permorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The order of a permutation — permorder","text":"Coerces argument cycle form. order identity permutation 1.","code":""},{"path":"/reference/permorder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The order of a permutation — permorder","text":"Robin K. S. Hankin","code":""},{"path":"/reference/permorder.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The order of a permutation — permorder","text":"Uses mLCM() numbers package.","code":""},{"path":[]},{"path":"/reference/permorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The order of a permutation — permorder","text":"","code":"x <- rperm(5,20) permorder(x) #> [1] 16 19 12 15 36 permorder(x,FALSE) #> [1] 13680  stopifnot(all(is.id(x^permorder(x)))) stopifnot(is.id(x^permorder(x,FALSE)))"},{"path":"/reference/permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to create and coerce word objects and cycle objects — permutation","title":"Functions to create and coerce word objects and cycle objects — permutation","text":"Functions create permutation objects.  permutation virtual class.","code":""},{"path":"/reference/permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to create and coerce word objects and cycle objects — permutation","text":"","code":"word(M) permutation(x) is.permutation(x) cycle(x) is.word(x) is.cycle(x) as.word(x,n=NULL) as.cycle(x) cycle2word(x,n=NULL) char2cycle(char) cyc_len(n) shift_cycle(n) # S3 method for class 'word' as.matrix(x,...)"},{"path":"/reference/permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to create and coerce word objects and cycle objects — permutation","text":"M function word(), matrix rows corresponding     permutations word form x See details n functions .word() cycle2word(),     size word return; function cyc_len(), length   cycles return char function char2cycle() character vector     coerced cycle object ... arguments passed .matrix()","code":""},{"path":"/reference/permutation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to create and coerce word objects and cycle objects — permutation","text":"Functions word() cycle() rather formal functions make attempt coerce arguments sensible forms. user use permutation(), detects form input dispatches .word() .cycle(), much user-friendly try quite hard Right Thing (tm). Functions word() cycle() functions package assign class word cycle object. Function word() takes matrix returns word object; silently coerces integer. Function cycle() takes “cyclist”, , list whose elements lists whose elements vectors (disjoint cycles); returns object class “cycle”.  nicifies input nicify_cyclist() returning . word matrix whose rows correspond permutations word format. cycle list whose elements correspond permutations cycle form.  cycle object comprises elements informally dubbed ‘cyclists’.  cyclist list integer vectors corresponding cycles permutation. Function  cycle2word() converts cycle objects word objects. Function shift_cycle() convenience wrapper .cycle(seq_len(n)); cyc_len() synonym. common error (least, ) use cycle() meant .cycle(). print method sensitive value option ‘print_word_as_cycle’, documented print.Rd. Function .matrix.word() coerces vector permutations word form matrix, row word.  get permutation matrix (, square matrix ones zeros exactly one entry 1 row column), use perm_matrix(). function .word(), argument n act reduce size word, increase .  want reduce size, use trim() tidy().  function call word() except directly (e.g. call size<-.word(), give recursion).","code":""},{"path":"/reference/permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to create and coerce word objects and cycle objects — permutation","text":"Returns cycle object word object","code":""},{"path":"/reference/permutation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions to create and coerce word objects and cycle objects — permutation","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to create and coerce word objects and cycle objects — permutation","text":"","code":"word(matrix(1:8,7,8)) # default print method coerces to cycle form #> [1] (28)(37)(46)     (12)(38)(47)(56) (13)(48)(57)     (14)(23)(58)(67) #> [5] (15)(24)(68)     (16)(25)(34)(78) (17)(26)(35)     #> [coerced from word form]  cycle(list(list(c(1,8,2),c(3,6)),list(1:2, 4:8))) #> [1] (182)(36)   (12)(45678)  char2cycle(c(\"(1,4)(6,7)\",\"(3,4,2)(8,19)\", \"(56)\",\"(12345)(78)\",\"(78)\")) #> [1] (1,4)(6,7)       (2,3,4)(8,19)    (5,6)            (1,2,3,4,5)(7,8) #> [5] (7,8)             jj <- c(4,2,3,1)  as.word(jj) #> [1] (14) #> [coerced from word form] as.cycle(jj) #> [1] (1423)  as.cycle(1:2)*as.cycle(1:8) == as.cycle(1:8)*as.cycle(1:2)  # FALSE! #> [1] FALSE  x <- rperm(10,7) y <- rperm(10,7) as.cycle(commutator(x,y)) #>  [1] (1745236)     (175)(26)(34) (13)(2647)    (15462)       (2674)(35)    #>  [6] (2473)(56)    (1672345)     (175)(246)    (1735264)     (147)(263)     cyc_len(1:9) #> [1] ()          (12)        (123)       (1234)      (12345)     (123456)    #> [7] (1234567)   (12345678)  (123456789)"},{"path":"/reference/permutations-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The Symmetric Group: Permutations of a Finite Set — permutations-package","title":"The Symmetric Group: Permutations of a Finite Set — permutations-package","text":"Manipulates invertible functions finite set              .  Can transform word form cycle form              back.  cite package publications please use              Hankin (2020) \"Introducing permutations R package\",              SoftwareX, volume 11 <doi:10.1016/j.softx.2020.100453>.","code":""},{"path":"/reference/permutations-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Symmetric Group: Permutations of a Finite Set — permutations-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.","code":""},{"path":"/reference/permutations-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Symmetric Group: Permutations of a Finite Set — permutations-package","text":"Robin K. S. Hankin [aut, cre] (<https://orcid.org/0000-0001-5982-0415>),   Paul Egeler [ctb] (<https://orcid.org/0000-0001-6948-9498>) Maintainer: Robin K. S. Hankin <hankin.robin@gmail.com>","code":""},{"path":"/reference/permutations-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Symmetric Group: Permutations of a Finite Set — permutations-package","text":"","code":"a <- rperm(10,5) b <- rperm(10,5)  a*b #>  [1] (123)     (1254)    (1253)    (135)(24) (132)(45) (12543)   (12345)   #>  [8] (124)     (1543)    (14)      #> [coerced from word form]  inverse(a) #>  [1] (1453)   (13)(45) (14253)  (1534)   (1245)   (1534)   (1235)   (1435)   #>  [9] (154)    (12)(35) #> [coerced from word form]"},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for permutation objects — print","title":"Print methods for permutation objects — print","text":"Print methods permutation objects matrix-like printing words bracket notation cycle objects.","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for permutation objects — print","text":"","code":"# S3 method for class 'cycle' print(x, give_string=FALSE, ...) # S3 method for class 'word' print(x, h = getOption(\"print_word_as_cycle\"), ...) as.character_cyclist(y,comma=TRUE)"},{"path":"/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for permutation objects — print","text":"x Object class permutation word objects     dispatched print.word() cycle objects dispatched     print.cycle() h Boolean, default TRUE meaning coerce words     cycle form printing.  See details ... arguments (currently ignored) y,comma .character.cyclist(), argument y     list cycles (cyclist); comma Boolean,     specifying whether include comma output give_string function","code":""},{"path":"/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for permutation objects — print","text":"Returns argument invisibly, printing (except   print.cycle(x,give_string=TRUE), case character   vector returned).","code":""},{"path":"/reference/print.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print methods for permutation objects — print","text":"Printing word objects controlled   options(\"print_word_as_cycle\").  default behaviour   coerce word cycle form print , notice   object coerced word. options(\"print_word_as_cycle\") FALSE, objects   class word printed matrix rows permutations   fixed points indicated dot. Function .character_cyclist() internal function used   print.cycle(), really designed end-user.    takes cyclist returns character string. Function print_word() print_cycle() provided   power users.  functions print argument directly word   cycle form; coerce appropriate form.  Use   print_word() permutation word form want   inspect word form (reason) want set   options(\"print_word_as_cycle\").  See size.Rd   use-case. Coercing cycle character vector can done   .character(), returns character vector   suitable .cycle(), cycle   (.cycle(.character()) == ) return TRUE.   want use options print method, use   print.cycle(...,give_string=TRUE), respects print   options discussed .  Neither give useful output   argument word form. print method includes experimental functionality display   permutations sets default integers   \\(1,2,\\ldots, n\\).  cycle word print methods   sensitive option perm_set: default value   NULL means use integers.  symbols may elements   character vector; use idiom  override default.  beware!  permutation includes   numbers greater length perm_set, NA   printed.  possible use vectors elements   one character (e.g. state.abb). printing cycle objects, commas controlled option   \"comma\".  default NULL means including commas   representation size permutation exceeds 9.  works   well integers less suitable using letters state   abbreviations.  Force use commas setting option   TRUE FALSE, e.g.  print method change internal representation word   cycle objects, affects printed. print method sensitive experimental option   print_in_length_order (via function   .character_cyclist()).  TRUE, permutations cycle   form printed cycles increasing length order.   Set  package vignette (type vignette(\"print\")   command line) gives details long-form documentation.","code":"options(\"perm_set\" = letters) options(\"comma\" = TRUE) options(\"print_in_length_order\" = TRUE)"},{"path":"/reference/print.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print methods for permutation objects — print","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for permutation objects — print","text":"","code":"# generate a permutation in *word* form: x <- rperm(4,9)  # default behaviour is to print in cycle form irregardless: x #> [1] (1853)(276)(49) (124835976)     (135296)(478)   (168594)(23)    #> [coerced from word form]  # change default using options(): options(print_word_as_cycle=FALSE)  # objects in word form now printed using matrix notation: x #>     1 2 3 4 5 6 7 8 9 #> [1] 8 7 1 9 3 2 6 5 4 #> [2] 2 4 5 8 9 1 6 3 7 #> [3] 3 9 5 7 2 1 8 4 6 #> [4] 6 3 2 1 9 8 . 5 4  # printing of cycle form objects not altered: as.cycle(x) #> [1] (1853)(276)(49) (124835976)     (135296)(478)   (168594)(23)     # restore default: options(print_word_as_cycle=TRUE)  as.character_cyclist(list(1:4,10:11,20:33))  # x a cyclist; #> [1] \"(1,2,3,4)(10,11)(20,21,22,23,24,25,26,27,28,29,30,31,32,33)\" as.character_cyclist(list(c(1,5,4),c(2,2)))  # does not check for consistency #> [1] \"(1,5,4)(2,2)\" as.character_cyclist(list(c(1,5,4),c(2,9)),comma=FALSE) #> [1] \"(154)(29)\"  options(\"perm_set\" = letters) rperm(r=9) #>  [1] (agehc)(bfi)   (ac)(bhfgie)   (af)(cdh)(egi) (ahgd)(beifc)  (acihdb)(eg)   #>  [6] (aeigbdfhc)    (ahigdf)(bc)   (aehb)(cgf)    (adbihec)(fg)  (agi)(bfhde)   #> [coerced from word form] options(\"perm_set\" = NULL)  # restore default"},{"path":"/reference/rperm.html","id":null,"dir":"Reference","previous_headings":"","what":"Random permutations — rperm","title":"Random permutations — rperm","text":"Function rperm() creates word object random permutations.   Function rcyc() creates random permutations comprising single   (group-theoretic) cycle specified length.  Functions   r1cyc() rgs1() low-level helper functions.","code":""},{"path":"/reference/rperm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random permutations — rperm","text":"","code":"rperm(n=10,r=7,moved=NA) rcyc(n,len,r=len) r1cyc(len,vec) rgs1(s) rgivenshape(n,s,size=sum(s))"},{"path":"/reference/rperm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random permutations — rperm","text":"n Number permutations create r Size permutations len Length cycles rcyc() r1cyc() moved function rperm(), integer specifying many     elements can move (, many elements map     ), default NA meaning choose permutation     random.  useful want permutation     compact cycle representation vec Vector integers generate cycle s,size Shape size permutations create","code":""},{"path":"/reference/rperm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random permutations — rperm","text":"Returns object class word","code":""},{"path":"/reference/rperm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random permutations — rperm","text":"Robin K. S. Hankin","code":""},{"path":"/reference/rperm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Random permutations — rperm","text":"Argument moved specifies maximum number elements   map ; actual number non-fixed elements   might lower (elements might map ).  can   control number non-fixed elements precisely argument   len function rcyc(), although give   permutations single (group-theoretic) cycle. Argument s function rgivensize() can include 1s   (ones).  Although length-one cycles dropped resulting   permutation, sometimes useful include increase   size result, see examples. function rgivenshape(), primary argument n   vector length greater 1, interpreted shape   permutation, single random permutation returned.","code":""},{"path":[]},{"path":"/reference/rperm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random permutations — rperm","text":"","code":"rperm() #>  [1] (1547)       (164572)     (12)(45)(67) (1437256)    (13)(24)(67) #>  [6] (1352)(67)   (26475)      (12765)(34)  (17526)(34)  (13746)(25)  #> [coerced from word form] as.cycle(rperm(30,9)) #>  [1] (17462)(3589)   (1532)(6897)    (18)(23)(45967) (1245387)       #>  [5] (19324)(58)     (12396874)      (27659)(38)     (145639)(27)    #>  [9] (146258)(397)   (17)(2589)(46)  (18)(2375)      (289753)        #> [13] (134926)(58)    (17298)(45)     (178394)(26)    (192756)(34)    #> [17] (1796)(345)     (37)(69)        (16)(2384957)   (15893)(247)    #> [21] (1867)(2395)    (19)(2358)(67)  (126589743)     (13)(2689)(475) #> [25] (17825)(394)    (17453286)      (18624)(3957)   (1745269)(38)   #> [29] (1649)(2873)    (1736954)       rperm(10,9,2) #>  [1] ()   (29) ()   (14) ()   ()   (68) ()   (28) ()   #> [coerced from word form]  rcyc(20,5) #>  [1] (12435) (13452) (13245) (15243) (12453) (13254) (12435) (14325) (14352) #> [10] (12543) (14532) (15324) (13425) (12543) (14235) (14523) (12345) (12435) #> [19] (15423) (12354) rcyc(20,5,9) #>  [1] (16238) (23485) (19483) (14729) (16539) (36857) (16247) (36587) (19358) #> [10] (24568) (12859) (39567) (34769) (24769) (29546) (17856) (46758) (39865) #> [19] (16243) (16253)  rgivenshape(10,c(2,3))   # size 5 #>  [1] (143)(25) (143)(25) (125)(34) (154)(23) (134)(25) (134)(25) (13)(245) #>  [8] (13)(245) (15)(243) (135)(24) rgivenshape(10,c(2,3,1,1)) # size 7 #>  [1] (14)(235) (12)(456) (23)(465) (246)(35) (145)(23) (153)(47) (175)(46) #>  [8] (176)(24) (125)(36) (12)(347)  rgivenshape(1:9) #> [1] (1,26,25,28,18,35,36)(2,23,29,13)(3,42,19,21,17,43)(4,24,45,15,30,34,27,11,8)(5,44,12,33,38,37,10,16)(6,32,41,14,20)(7,9)(22,40,31)  allpermslike(rgivenshape(c(1,1,3,4))) #>  [1] (158)(2739) (185)(2739) (158)(2793) (185)(2793) (158)(2397) (185)(2397) #>  [7] (158)(2379) (185)(2379) (158)(2973) (185)(2973) (158)(2937) (185)(2937)"},{"path":"/reference/sgn.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign of a permutation — sgn","title":"Sign of a permutation — sgn","text":"Returns sign permutation","code":""},{"path":"/reference/sgn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign of a permutation — sgn","text":"","code":"sgn(x) is.even(x) is.odd(x)"},{"path":"/reference/sgn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign of a permutation — sgn","text":"x permutation object","code":""},{"path":"/reference/sgn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sign of a permutation — sgn","text":"sign permutation \\(\\pm 1\\) depending whether even odd.  permutation even can written product even number transpositions, odd can written odd number transpositions.  map \\(\\operatorname{sgn}\\colon S_n\\longrightarrow\\left\\lbrace +1,-1\\right\\rbrace\\) homomorphism; see examples.","code":""},{"path":"/reference/sgn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sign of a permutation — sgn","text":"Robin K. S. Hankin","code":""},{"path":"/reference/sgn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sign of a permutation — sgn","text":"Internally, function sgn() coerces cycle form. sign null permutation NULL.","code":""},{"path":[]},{"path":"/reference/sgn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sign of a permutation — sgn","text":"","code":"sgn(id)  # always problematic #> [1] 1  sgn(rperm(10,5)) #>  [1] -1  1  1 -1  1 -1  1  1 -1  1  x <- rperm(40,6) y <- rperm(40,6)   stopifnot(all(sgn(x*y) == sgn(x)*sgn(y)))   # sgn() is a homomorphism   z <- as.cycle(rperm(20,9,5)) z[is.even(z)] #> [1] (26)(34) (195)    (38764)  (59768)  (16875)  (28)(67) (679)    (28476)  z[is.odd(z)] #>  [1] (2659)    (1946)    (379)(45) (164)(35) (58)      (28)(367) (146)(37) #>  [8] (3897)    (18)      (29)      (1687)    (45)"},{"path":"/reference/shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Shape of a permutation — shape","title":"Shape of a permutation — shape","text":"Returns shape permutation.  given word, coerces cycle form.","code":""},{"path":"/reference/shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shape of a permutation — shape","text":"","code":"shape(x, drop = TRUE,id1 = TRUE,decreasing = FALSE) shape_cyclist(cyc,id1=TRUE) padshape(x, drop = TRUE, n=NULL) shapepart(x) shapepart_cyclist(cyc,n=NULL)"},{"path":"/reference/shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shape of a permutation — shape","text":"x Object class cycle (, coerced) cyc cyclist n Integer governing size partition assumed,     default NULL meaning use largest element drop Boolean, default TRUE meaning unlist     possible id1 Boolean, default TRUE function     shape_cyclist() meaning shape identity     “1” FALSE meaning shape NULL decreasing function shape(), Boolean default   FALSE meaning return cycle lengths order given   nicify_cyclist() TRUE meaning sort decreasing   order","code":""},{"path":"/reference/shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shape of a permutation — shape","text":"Function shape() returns list elements representing   lengths component cycles. Function shapepart() returns object class   partition showing permutation set partition   disjoint cycles. Function padshape() returns list shapes padded   ones total size permutation. shapepart_cyclist() shapepart_cyclist() low-level   helper functions.","code":""},{"path":"/reference/shape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shape of a permutation — shape","text":"Robin K. S. Hankin","code":""},{"path":"/reference/shape.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shape of a permutation — shape","text":"call “shape”, others call “cycle type”,   sometimes see “cycle type determines conjugacy class”   theorem.","code":""},{"path":[]},{"path":"/reference/shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shape of a permutation — shape","text":"","code":"jj <- as.cycle(c(\"123\",\"\",\"(12)(34)\",\"12345\")) jj #> [1] (123)    ()       (12)(34) (12345)  shape(jj) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] 1 #>  #> [[3]] #> [1] 2 2 #>  #> [[4]] #> [1] 5 #>   shape(rperm(10,9)) # coerced to cycle #> [[1]] #> [1] 4 3 #>  #> [[2]] #> [1] 6 2 #>  #> [[3]] #> [1] 8 #>  #> [[4]] #> [1] 6 3 #>  #> [[5]] #> [1] 4 5 #>  #> [[6]] #> [1] 6 2 #>  #> [[7]] #> [1] 6 3 #>  #> [[8]] #> [1] 4 2 #>  #> [[9]] #> [1] 2 4 2 #>  #> [[10]] #> [1] 9 #>   a <- rperm() identical(shape(a,dec=TRUE),shape(a^cyc_len(2),dec=TRUE)) #> [1] TRUE   data(megaminx) shape(megaminx) #> $White #> [1] 5 5 5 5 5 #>  #> $Purple #> [1] 5 5 5 5 5 #>  #> $DarkYellow #> [1] 5 5 5 5 5 #>  #> $DarkBlue #> [1] 5 5 5 5 5 #>  #> $Red #> [1] 5 5 5 5 5 #>  #> $DarkGreen #> [1] 5 5 5 5 5 #>  #> $LightGreen #> [1] 5 5 5 5 5 #>  #> $Orange #> [1] 5 5 5 5 5 #>  #> $LightBlue #> [1] 5 5 5 5 5 #>  #> $LightYellow #> [1] 5 5 5 5 5 #>  #> $Pink #> [1] 5 5 5 5 5 #>  #> $Grey #> [1] 5 5 5 5 5 #>   jj <- megaminx*megaminx[1] identical(shape(jj),shape(tidy(jj)))  #tidy() does not change shape #> [1] TRUE   allperms(3) #> [1] ()    (23)  (12)  (123) (132) (13)  #> [coerced from word form] shapepart(allperms(3)) #>                  #> [1,] 1 2 1 1 1 1 #> [2,] 2 1 1 1 1 2 #> [3,] 3 1 2 1 1 1 shapepart(rperm(10,5)) #>                          #> [1,] 1 1 1 1 1 3 1 2 1 1 #> [2,] 2 1 1 2 1 1 1 1 1 1 #> [3,] 2 2 1 2 1 1 1 1 1 1 #> [4,] 3 1 2 1 2 2 1 1 1 1 #> [5,] 1 1 1 2 1 2 1 1 1 1  shape_cyclist(list(1:4,8:9)) #> [1] 4 2 shapepart_cyclist(list(1:4,8:9)) #> [1] 1 1 1 1 3 4 5 2 2"},{"path":"/reference/size.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets or sets the size of a permutation — size","title":"Gets or sets the size of a permutation — size","text":"‘size’ permutation cardinality set bijection.","code":""},{"path":"/reference/size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets or sets the size of a permutation — size","text":"","code":"size(x) addcols(M,n) # S3 method for class 'word' size(x) # S3 method for class 'cycle' size(x) # S3 method for class 'word' size(x) <- value # S3 method for class 'cycle' size(x) <- value"},{"path":"/reference/size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets or sets the size of a permutation — size","text":"x permutation object M matrix may coerced word n,value size set , integer","code":""},{"path":"/reference/size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gets or sets the size of a permutation — size","text":"word object, size equal number columns. cycle object, equal largest element cycle. Function addcols() low-level function operates , returns, matrix.  just adds columns right M, values equal column numbers, thus corresponding fixed elements.  resulting matrix n columns.  function remove columns, n<ncol(M) error returned. Setting functions decrease size permutation; use trim() . meaningless change size cycle object.  Trying result error.  can coerce cycle objects word form, change size . Function size<-.word() [size(x) <- 9] trims argument trim() adds fixed elements necessary.  Compare addcols(), works permutations word form.","code":""},{"path":"/reference/size.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets or sets the size of a permutation — size","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets or sets the size of a permutation — size","text":"","code":"size(as.cycle(c(\"(17)\",\"(123)(45)\")))  # should be 7 #> [1] 7  x <- as.word(as.cycle(\"123\")) print_word(x) #>     1 2 3 #> [1] 2 3 1 size(x) <- 9 print_word(x) #>     1 2 3 4 5 6 7 8 9 #> [1] 2 3 1 . . . . . .   size(as.cycle(1:5) + as.cycle(100:101)) #> [1] 101  size(id) #> [1] 0"},{"path":"/reference/stabilizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Stabilizer of a permutation — stabilizer","title":"Stabilizer of a permutation — stabilizer","text":"permutation \\(\\phi\\) said stabilize set \\(S\\)   image \\(S\\) \\(\\phi\\) subset \\(S\\),   , \\(\\left\\lbrace\\left.  \\phi(s)\\right|s\\S   \\right\\rbrace\\subseteq S \\).  may written   \\(\\phi(S)\\subseteq S\\).  Given vector \\(G\\)   permutations, define stabilizer \\(S\\) \\(G\\)   elements \\(G\\) stabilize \\(S\\). Given \\(S\\), clear identity permutation stabilizes   \\(S\\), \\(\\phi,\\psi\\) stabilize \\(S\\)   \\(\\phi\\psi\\), \\(\\phi^{-1}\\)   [\\(\\phi\\) bijection \\(S\\) ].","code":""},{"path":"/reference/stabilizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stabilizer of a permutation — stabilizer","text":"","code":"stabilizes(a,s) stabilizer(a,s)"},{"path":"/reference/stabilizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stabilizer of a permutation — stabilizer","text":"Permutation (coerced class cycle) s Subset \\(\\left\\lbrace       1,\\ldots,n\\right\\rbrace\\), stabilized","code":""},{"path":"/reference/stabilizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stabilizer of a permutation — stabilizer","text":"boolean vector [stabilizes()] vector permutations cycle form [stabilizer()]","code":""},{"path":"/reference/stabilizer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stabilizer of a permutation — stabilizer","text":"identity permutation stabilizes set. Functions stabilizes() stabilizer() coerce arguments cycle form.","code":""},{"path":"/reference/stabilizer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stabilizer of a permutation — stabilizer","text":"Robin K. S. Hankin","code":""},{"path":"/reference/stabilizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stabilizer of a permutation — stabilizer","text":"","code":"a <- rperm(200) stabilizer(a,3:4) #>  [1] (16725)       (12765)       (12576)       (15276)       (12756)(34)   #>  [6] (16275)       (16752)       (156)(27)(34) (15627)(34)   (176)(34)     #> [11] (34)(567)     (257)         (1752)        (156)(34)     (12)(576)      all_perms_shape(c(1,1,2,2)) |> stabilizer(2:3)  # some include (23), some don't #> [1] (16)(23) (16)(45) (14)(23) (14)(56) (15)(23) (15)(46) (23)(56) (23)(46) #> [9] (23)(45)"},{"path":"/reference/tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities to neaten permutation objects — tidy","title":"Utilities to neaten permutation objects — tidy","text":"Various utilities neaten word objects removing fixed elements","code":""},{"path":"/reference/tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities to neaten permutation objects — tidy","text":"","code":"tidy(x) trim(x)"},{"path":"/reference/tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities to neaten permutation objects — tidy","text":"x Object class word, case     tidy(), coerced class word","code":""},{"path":"/reference/tidy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utilities to neaten permutation objects — tidy","text":"Function trim() takes word , starting right, strips columns corresponding fixed elements finds non-fixed element.  makes sense cycle objects; x class cycle, error returned. Function tidy() aggressive.  firstly removes fixed elements, renames non-fixed ones match new column numbers.  map isomorphism (sic) respect composition.","code":""},{"path":"/reference/tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities to neaten permutation objects — tidy","text":"Returns object class word","code":""},{"path":"/reference/tidy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utilities to neaten permutation objects — tidy","text":"Robin K. S. Hankin","code":""},{"path":"/reference/tidy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Utilities to neaten permutation objects — tidy","text":"Results empty (, zero-column) words vector identity permutations given","code":""},{"path":[]},{"path":"/reference/tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities to neaten permutation objects — tidy","text":"","code":"as.cycle(5:3)+as.cycle(7:9) #> [1] (354)(789) tidy(as.cycle(5:3)+as.cycle(7:9)) #> [1] (132)(456) #> [coerced from word form]  as.cycle(tidy(c(as.cycle(1:2),as.cycle(6:7)))) #> [1] (12) (34)   nicify_cyclist(list(c(4,6), c(7), c(2,5,1), c(8,3))) #> [[1]] #> [1] 1 2 5 #>  #> [[2]] #> [1] 3 8 #>  #> [[3]] #> [1] 4 6 #>   data(megaminx) tidy(megaminx)  # has 120 columns, not 129 #>                                                                                          White  #>                        (1,3,5,7,9)(2,4,6,8,10)(12,24,36,48,60)(13,25,37,49,51)(14,26,38,50,52)  #>                                                                                         Purple  #>                  (6,58,82,72,26)(7,59,83,73,27)(8,60,84,74,28)(11,13,15,17,19)(12,14,16,18,20)  #>                                                                                     DarkYellow  #>                 (8,20,80,70,38)(9,11,71,61,39)(10,12,72,62,40)(21,23,25,27,29)(22,24,26,28,30)  #>                                                                                       DarkBlue  #>              (1,23,69,109,41)(2,24,70,110,42)(10,22,68,108,50)(31,33,35,37,39)(32,34,36,38,40)  #>                                                                                            Red  #>               (2,34,106,96,52)(3,35,107,97,53)(4,36,108,98,54)(41,43,45,47,49)(42,44,46,48,50)  #>                                                                                      DarkGreen  #>                  (4,46,94,84,14)(5,47,95,85,15)(6,48,96,86,16)(51,53,55,57,59)(52,54,56,58,60)  #>                                                                                     LightGreen  #>         (21,79,111,101,31)(22,80,112,102,32)(30,78,120,110,40)(61,63,65,67,69)(62,64,66,68,70)  #>                                                                                         Orange  #>            (18,90,112,62,28)(19,81,113,63,29)(20,82,114,64,30)(71,73,75,77,79)(72,74,76,78,80)  #>                                                                                      LightBlue  #>            (16,56,92,114,74)(17,57,93,115,75)(18,58,94,116,76)(81,83,85,87,89)(82,84,86,88,90)  #>                                                                                    LightYellow  #>        (44,104,116,86,54)(45,105,117,87,55)(46,106,118,88,56)(91,93,95,97,99)(92,94,96,98,100)  #>                                                                                           Pink  #> (32,66,118,98,42)(33,67,119,99,43)(34,68,120,100,44)(101,103,105,107,109)(102,104,106,108,110)  #>                                                                                           Grey  #> (64,76,88,100,102)(65,77,89,91,103)(66,78,90,92,104)(111,113,115,117,119)(112,114,116,118,120)  #> [coerced from word form] stopifnot(all(unique(sort(unlist(as.cycle(tidy(megaminx)),recursive=TRUE)))==1:120))  jj <- megaminx*megaminx[1] stopifnot(identical(shape(jj),shape(tidy(jj))))  #tidy() does not change shape"},{"path":"/reference/valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to validate permutations — valid","title":"Functions to validate permutations — valid","text":"Functions validate permutation objects: valid, return TRUE valid, generate warning() return FALSE. Function singleword_valid() takes integer vector, interpreted word, checks permutation seq_len(max(x)). Function cyclist_valid() takes cyclist checks argument corresponds meaningful permutation: elements must vectors strictly positive integers repeated values empty pairwise intersection.  Compare nicify_cyclist() [documented cyclist.Rd] cosmetic, converting argument standard form.","code":""},{"path":"/reference/valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to validate permutations — valid","text":"","code":"singleword_valid(w) cyclist_valid(x)"},{"path":"/reference/valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to validate permutations — valid","text":"w function singleword_valid(), integer vector x function cyclist_valid(), cyclist","code":""},{"path":"/reference/valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to validate permutations — valid","text":"Returns either TRUE, gives warning returns FALSE","code":""},{"path":"/reference/valid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions to validate permutations — valid","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"/reference/valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to validate permutations — valid","text":"","code":"singleword_valid(sample(1:9))      # TRUE #> [1] TRUE singleword_valid(c(3L,4L,2L,1L))   # TRUE #> [1] TRUE singleword_valid(c(3,4,2,1))       # FALSE (not integer) #> Warning: invalid word #> [1] FALSE singleword_valid(c(3L,3L,2L,1L))   # FALSE (3 repeated) #> Warning: invalid word #> [1] FALSE  cyclist_valid(list(c(1,8,2),c(3,6))) # TRUE #> [1] TRUE cyclist_valid(list(c(1,8,2),c(3,6))) # FALSE ('8' is repeated) #> [1] TRUE cyclist_valid(list(c(1,8,1),c(3,6))) # FALSE ('1' is repeated) #> Warning: repeated value #> [1] FALSE cyclist_valid(list(c(0,8,2),c(3,6))) # FALSE (zero element) #> Warning: zero element #> [1] FALSE"},{"path":"/news/index.html","id":"permutations-11-6","dir":"Changelog","previous_headings":"","what":"permutations 1.1-6","title":"permutations 1.1-6","text":"new groupaction vignette","code":""},{"path":"/news/index.html","id":"permutations-11-5","dir":"Changelog","previous_headings":"","what":"permutations 1.1-5","title":"permutations 1.1-5","text":"CRAN release: 2024-07-17 consistentification improvements documentation bugfix orbit() github workflows QC coverage code conduct contributing files remove mathjax keepcyc()","code":""},{"path":"/news/index.html","id":"permutations-11-1","dir":"Changelog","previous_headings":"","what":"permutations 1.1-1","title":"permutations 1.1-1","text":"capply() functionality added flexible print method bugfix: perm_matrix() now respects perm_set","code":""},{"path":"/news/index.html","id":"permutations-11-0","dir":"Changelog","previous_headings":"","what":"permutations 1.1-0","title":"permutations 1.1-0","text":"faro shuffles cycles given length, random cycles given length","code":""},{"path":"/news/index.html","id":"permutations-10-10","dir":"Changelog","previous_headings":"","what":"permutations 1.0-10","title":"permutations 1.0-10","text":"mathjax used dot object imported [commutator] documented","code":""},{"path":"/news/index.html","id":"permutations-10-9","dir":"Changelog","previous_headings":"","what":"permutations 1.0-9","title":"permutations 1.0-9","text":"CRAN release: 2020-11-12 add sticker README bugfixes new vignette, cyclist. add adjoint function ad() new vignette: adjoint.Rmd kilominx starminx functionality","code":""}]
